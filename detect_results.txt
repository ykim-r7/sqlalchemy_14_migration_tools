🔍 Scanning /Users/ykim/code/divvy-dev/Divvy/src/python/ for SQLAlchemy migration patterns...
📁 Extensions: .py

🔍 Found 1220 potential issues in 245 files:

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyUtils/sensitive_data.py:
  🟡 Line 103: possible_row_attribute (==)
     Code: SensitiveDataInternalType.identifier == SensitiveDataClassification.internal_sensitive_data_type_identifier
     Arg:  SensitiveDataClassification.internal_sensitive_data_type_identifier

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyUtils/metrics.py:
  🚨 Line 75: direct_query (in_or_notin_)
     Code: dbo.ResourceCommonData.organization_service_id.in_(db.session.query(dbo.OrganizationService.organization_service_id).filter(dbo.OrganizationService.organization_id == organization_id))
     Arg:  db.session.query(dbo.OrganizationService.organization_service_id).filter(dbo.OrganizationService.organization_id == organization_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyUtils/kubernetes.py:
  ⚠️  Line 228: query_variable (in_or_notin_)
     Code: ResourceCommonData.resource_id.in_(subquery)
     Arg:  subquery

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyUtils/ics_auto_configuration.py:
  🟡 Line 58: possible_row_variable (==)
     Code: SystemSetting.name == _FIRST_TIME_SETUP_SETTING_NAME
     Arg:  _FIRST_TIME_SETUP_SETTING_NAME

  🟡 Line 59: possible_row_variable (==)
     Code: SystemSetting.category == _FIRST_TIME_SETUP_SETTING_CATEGORY
     Arg:  _FIRST_TIME_SETUP_SETTING_CATEGORY

  🟡 Line 496: possible_row_variable (==)
     Code: SystemSetting.category == _FIRST_TIME_SETUP_SETTING_CATEGORY
     Arg:  _FIRST_TIME_SETUP_SETTING_CATEGORY

  🟡 Line 508: possible_row_variable (==)
     Code: SystemSetting.category == _FIRST_TIME_SETUP_SETTING_CATEGORY
     Arg:  _FIRST_TIME_SETUP_SETTING_CATEGORY

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyComplianceScorecard/scopes.py:
  🚨 Line 114: direct_query (in_or_notin_)
     Code: Badge.target_resource_id.in_(db.session.query(Badge.target_resource_id).filter(cond))
     Arg:  db.session.query(Badge.target_resource_id).filter(cond)

  ⚠️  Line 149: query_variable (in_or_notin_)
     Code: Badge.target_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 152: query_variable (in_or_notin_)
     Code: ResourceGroup.organization_service_id.in_(cluster_id_query)
     Arg:  cluster_id_query

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyComplianceScorecard/scorecard_util.py:
  🚨 Line 374: direct_query (in_or_notin_)
     Code: ResourceCommonData.organization_service_id.in_(session.query(OrganizationService.organization_service_id).filter(OrganizationService.organization_id.in_(organization_ids)))
     Arg:  session.query(OrganizationService.organization_service_id).filter(OrganizationService.organization_id.in_(organization_ids))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/divvyup_api.py:
  🟡 Line 265: possible_row_variable (>)
     Code: inventory.count() > MAX_RESULT_SET
     Arg:  MAX_RESULT_SET

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/v2/prototype/v2_groups.py:
  🚨 Line 141: direct_query (in_or_notin_)
     Code: UG.name.in_(db.session.query(ASGM.local_group_name).filter(ASGM.organization_id == session.user.organization_id, ASGM.local_group_name == UG.name))
     Arg:  db.session.query(ASGM.local_group_name).filter(ASGM.organization_id == session.user.organization_id, ASGM.local_group_name == UG.name)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/v2/prototype/v2_apa.py:
  🟡 Line 535: possible_row_attribute (==)
     Code: SourceNode.id == AttackPath.first_node_id
     Arg:  AttackPath.first_node_id

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/v2/prototype/v2_clouds.py:
  🚨 Line 1504: direct_query (in_or_notin_)
     Code: DbObjects.ServiceRegion.organization_service_id.in_(db.session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.organization_id == session.user.organization_id))
     Arg:  db.session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.organization_id == session.user.organization_id)

  🟡 Line 1614: possible_row_attribute (==)
     Code: DbObjects.CollectionData.id == DbObjects.CollectionLink.data_id
     Arg:  DbObjects.CollectionLink.data_id

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/v2/prototype/v2_drift_protection.py:
  🚨 Line 352: direct_query (in_or_notin_)
     Code: DbObjects.ResourceCommonData.resource_id.notin_(db.session.query(DbObjects.ResourceLock.resource_id))
     Arg:  db.session.query(DbObjects.ResourceLock.resource_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/v2/public/v2_harvesting_strategy.py:
  🚨 Line 424: direct_query (in_or_notin_)
     Code: OrganizationService.resource_id.in_(db.session.query(Badge.target_resource_id).filter(Badge.key == badge['key'], Badge.value == badge['value']))
     Arg:  db.session.query(Badge.target_resource_id).filter(Badge.key == badge['key'], Badge.value == badge['value'])

  🚨 Line 726: direct_query (in_or_notin_)
     Code: ServiceRegion.organization_service_id.in_(db.session.query(OrganizationService.organization_service_id).filter(OrganizationService.organization_id == organization_id))
     Arg:  db.session.query(OrganizationService.organization_service_id).filter(OrganizationService.organization_id == organization_id)

  🚨 Line 740: direct_query (in_or_notin_)
     Code: HarvestOverride.strategy_id.in_(db.session.query(HarvestStrategy.id).filter(HarvestStrategy.organization_id == organization_id))
     Arg:  db.session.query(HarvestStrategy.id).filter(HarvestStrategy.organization_id == organization_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/v2/public/v2_resources.py:
  🚨 Line 1873: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_ids)))
     Arg:  db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_ids))

  🚨 Line 1888: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(db.session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.organization_id == DivvySession.current_session().user.organization_id))
     Arg:  db.session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.organization_id == DivvySession.current_session().user.organization_id)

  🚨 Line 2103: direct_query (in_or_notin_)
     Code: ResourceVulnerability.resource_id.in_(db.session.query(DbObjects.ResourceLink.right_resource_id).filter(DbObjects.ResourceLink.left_resource_id == resource_id_str))
     Arg:  db.session.query(DbObjects.ResourceLink.right_resource_id).filter(DbObjects.ResourceLink.left_resource_id == resource_id_str)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/v2/public/v2_insights.py:
  🚨 Line 2448: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(blacklist)))
     Arg:  db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(blacklist))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/v2/public/v2_clouds.py:
  ⚠️  Line 1370: query_variable (in_or_notin_)
     Code: OS.account_id.notin_(producer_acccount_ids_query)
     Arg:  producer_acccount_ids_query

  🚨 Line 1403: direct_query (in_or_notin_)
     Code: OS.organization_service_id.in_(db.session.query(ServiceEventProducer.organization_service_id.distinct()).filter(ServiceEventProducer.target_organization_service_id == target_id))
     Arg:  db.session.query(ServiceEventProducer.organization_service_id.distinct()).filter(ServiceEventProducer.target_organization_service_id == target_id)

  🚨 Line 2076: direct_query (in_or_notin_)
     Code: OrganizationService.organization_service_id.in_(db.session.query(ServiceDetector.organization_service_id))
     Arg:  db.session.query(ServiceDetector.organization_service_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/v2/public/v2_collections.py:
  🟡 Line 411: possible_row_attribute (==)
     Code: CollectionData.id == CollectionLink.data_id
     Arg:  CollectionLink.data_id

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/v2/public/v2_badges.py:
  🚨 Line 549: direct_query (in_or_notin_)
     Code: DbObjects.Badge.organization_service_id.in_(db.session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.status != DbObjects.OrganizationService.Status.DELETE, DbObjects.OrganizationService.cloud_type_id.notin_(CloudType.ALL_K8S)))
     Arg:  db.session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.status != DbObjects.OrganizationService.Status.DELETE, DbObjects.OrganizationService.cloud_type_id.notin_(CloudType.ALL_K8S))

  🚨 Line 564: direct_query (in_or_notin_)
     Code: DbObjects.Badge.organization_service_id.in_(db.session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.status != DbObjects.OrganizationService.Status.DELETE, DbObjects.OrganizationService.cloud_type_id.in_(CloudType.ALL_K8S)))
     Arg:  db.session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.status != DbObjects.OrganizationService.Status.DELETE, DbObjects.OrganizationService.cloud_type_id.in_(CloudType.ALL_K8S))

  🚨 Line 579: direct_query (in_or_notin_)
     Code: DbObjects.Badge.target_resource_id.in_(db.session.query(DbObjects.DivvyBot.resource_id).filter(DbObjects.DivvyBot.state != 'ARCHIVED'))
     Arg:  db.session.query(DbObjects.DivvyBot.resource_id).filter(DbObjects.DivvyBot.state != 'ARCHIVED')

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/v2/public/v2_users.py:
  🚨 Line 694: direct_query (in_or_notin_)
     Code: DbObjects.UserGroupUser.group_id.in_(db.session.query(DbObjects.UserGroup.group_id).filter(DbObjects.UserGroup.system_managed.is_(False)))
     Arg:  db.session.query(DbObjects.UserGroup.group_id).filter(DbObjects.UserGroup.system_managed.is_(False))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/v4/configs/aws/account_config.py:
  🚨 Line 61: direct_query (in_or_notin_)
     Code: OrganizationService.organization_service_id.in_(db.session.query(KubernetesClusterScanStatus.k8s_org_service_id).filter(KubernetesClusterScanStatus.organization_service_id == org_service.organization_service_id))
     Arg:  db.session.query(KubernetesClusterScanStatus.k8s_org_service_id).filter(KubernetesClusterScanStatus.organization_service_id == org_service.organization_service_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/private/aws/iam/just_in_time.py:
  ⚠️  Line 297: query_variable (in_or_notin_)
     Code: AwsIamJitaBaseRoleConfig.organization_service_id.in_(query)
     Arg:  query

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/v3/cvm/vulnerabilities.py:
  🟡 Line 899: possible_row_variable (>)
     Code: report.count() > MAXIMUM_ROWS_THRESHOLD
     Arg:  MAXIMUM_ROWS_THRESHOLD

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/v3/iam/api/iam_explorer/filtering.py:
  🚨 Line 1381: direct_query (in_or_notin_)
     Code: IAM_ApplicationResource.application_name.notin_(db.session.query(IAM_ApplicationCache.application_name))
     Arg:  db.session.query(IAM_ApplicationCache.application_name)

  🚨 Line 1404: direct_query (in_or_notin_)
     Code: IAM_ApplicationResource.application_name.notin_(db.session.query(IAM_ApplicationCache.application_name))
     Arg:  db.session.query(IAM_ApplicationCache.application_name)

  ⚠️  Line 2358: query_variable (in_or_notin_)
     Code: base_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 2363: query_variable (in_or_notin_)
     Code: base_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 2369: query_variable (in_or_notin_)
     Code: base_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 2369: query_variable (in_or_notin_)
     Code: base_cls.resource_id.notin_(tags_subq)
     Arg:  tags_subq

  ⚠️  Line 2375: query_variable (in_or_notin_)
     Code: base_cls.resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBlueprints/v3/iac/scans.py:
  🚨 Line 401: direct_query (in_or_notin_)
     Code: IacBuild.config_id.in_(session.query(IacConfiguration.id).filter(IacConfiguration.pack_id == args.pack_id).filter(IacConfiguration.source == args.pack_source))
     Arg:  session.query(IacConfiguration.id).filter(IacConfiguration.pack_id == args.pack_id).filter(IacConfiguration.source == args.pack_source)

  ⚠️  Line 451: query_variable (in_or_notin_)
     Code: IacBuild.config_id.in_(config_subq)
     Arg:  config_subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/vulnerability_assessment/vm_resource_cleaner.py:
  🚨 Line 29: direct_query (in_or_notin_)
     Code: VMResourceReport.report_id.notin_(self.session.query(ImageDigest.digest))
     Arg:  self.session.query(ImageDigest.digest)

  🚨 Line 37: direct_query (in_or_notin_)
     Code: VMResourceReport.report_id.notin_(self.session.query(ResourceCommonData.resource_id).filter(ResourceCommonData.resource_type == ResourceType.INSTANCE))
     Arg:  self.session.query(ResourceCommonData.resource_id).filter(ResourceCommonData.resource_type == ResourceType.INSTANCE)

  🚨 Line 49: direct_query (in_or_notin_)
     Code: VMResourceReport.report_id.notin_(self.session.query(ResourceCommonData.resource_id).filter(ResourceCommonData.resource_type == ResourceType.AUTOSCALING_GROUP))
     Arg:  self.session.query(ResourceCommonData.resource_id).filter(ResourceCommonData.resource_type == ResourceType.AUTOSCALING_GROUP)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/vulnerability_assessment/vm_aggregate_summarizer.py:
  🟡 Line 127: possible_row_attribute (==)
     Code: VMVulnerability.severity == Severity.NONE
     Arg:  Severity.NONE

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyCloudProviders/Providers/GoogleComputeEngine/backend.py:
  🟡 Line 1656: possible_row_attribute (==)
     Code: category == ResourceType.DATABASE_INSTANCE
     Arg:  ResourceType.DATABASE_INSTANCE

  🟡 Line 1662: possible_row_attribute (==)
     Code: category == ResourceType.DNS_ZONE
     Arg:  ResourceType.DNS_ZONE

  🟡 Line 1668: possible_row_attribute (==)
     Code: category == ResourceType.SERVICE_DATASET
     Arg:  ResourceType.SERVICE_DATASET

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyCloudProviders/Providers/MicrosoftAzureArm/backend.py:
  🟡 Line 1690: possible_row_attribute (==)
     Code: resource_type == ResourceType.DATABASE
     Arg:  ResourceType.DATABASE

  🟡 Line 3280: possible_row_attribute (!=)
     Code: container.public_access != PublicAccess.none
     Arg:  PublicAccess.none

  🟡 Line 4071: possible_row_attribute (==)
     Code: resource_type == ResourceType.DATABASE_INSTANCE
     Arg:  ResourceType.DATABASE_INSTANCE

  🟡 Line 4077: possible_row_attribute (==)
     Code: resource_type == ResourceType.DNS_ZONE
     Arg:  ResourceType.DNS_ZONE

  🟡 Line 4119: possible_row_attribute (==)
     Code: resource_type == ResourceType.BIG_DATA_WORKSPACE
     Arg:  ResourceType.BIG_DATA_WORKSPACE

  🟡 Line 4175: possible_row_attribute (==)
     Code: resource_type == ResourceType.DNS_ZONE
     Arg:  ResourceType.DNS_ZONE

  🟡 Line 4215: possible_row_attribute (==)
     Code: resource_type == ResourceType.DATABASE_INSTANCE
     Arg:  ResourceType.DATABASE_INSTANCE

  🟡 Line 4220: possible_row_attribute (==)
     Code: resource_type == ResourceType.DATABASE
     Arg:  ResourceType.DATABASE

  🟡 Line 4223: possible_row_attribute (==)
     Code: resource_type == ResourceType.DATA_STREAM
     Arg:  ResourceType.DATA_STREAM

  🟡 Line 4225: possible_row_attribute (==)
     Code: resource_type == ResourceType.DATABRICKS_WORKSPACE
     Arg:  ResourceType.DATABRICKS_WORKSPACE

  🟡 Line 4288: possible_row_attribute (==)
     Code: resource_type == ResourceType.DATA_FACTORY
     Arg:  ResourceType.DATA_FACTORY

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyCloudProviders/Providers/MicrosoftAzureArm/organizations.py:
  🟡 Line 196: possible_row_variable (!=)
     Code: org_service.connection_parameters != connection_parameter_data
     Arg:  connection_parameter_data

  🚨 Line 1378: direct_query (in_or_notin_)
     Code: ResourceTag.resource_id.in_(session.query(OrganizationService.resource_id).filter(OrganizationService.cloud_organization_id == cloud_organization_id))
     Arg:  session.query(OrganizationService.resource_id).filter(OrganizationService.cloud_organization_id == cloud_organization_id)

  🚨 Line 1608: direct_query (in_or_notin_)
     Code: Badge.organization_service_id.in_(session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_organization_id.is_(None)))
     Arg:  session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_organization_id.is_(None))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyCloudProviders/Providers/MicrosoftAzureArm/source/storage/converter.py:
  🟡 Line 333: possible_row_attribute (!=)
     Code: container['public_access'] != PublicAccess.NONE
     Arg:  PublicAccess.NONE

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyCloudProviders/Providers/AmazonWebServices/backend.py:
  🟡 Line 797: possible_row_attribute (==)
     Code: resource_id.get_type() == ResourceType.BIG_DATA_SERVERLESS_WORKGROUP
     Arg:  ResourceType.BIG_DATA_SERVERLESS_WORKGROUP

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyCloudProviders/Providers/AmazonWebServices/frontend.py:
  🟡 Line 9371: possible_row_attribute (==)
     Code: resource_type == ResourceType.DATABASE_INSTANCE
     Arg:  ResourceType.DATABASE_INSTANCE

  🟡 Line 9374: possible_row_attribute (==)
     Code: resource_type == ResourceType.BIG_DATA_INSTANCE
     Arg:  ResourceType.BIG_DATA_INSTANCE

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyCloudProviders/Providers/AmazonWebServices/organizations.py:
  🚨 Line 2251: direct_query (in_or_notin_)
     Code: Badge.organization_service_id.in_(session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_organization_id.is_(None)))
     Arg:  session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_organization_id.is_(None))

  🚨 Line 2266: direct_query (in_or_notin_)
     Code: ResourceTag.resource_id.in_(session.query(OrganizationService.resource_id).filter(OrganizationService.cloud_organization_id == cloud_organization_id))
     Arg:  session.query(OrganizationService.resource_id).filter(OrganizationService.cloud_organization_id == cloud_organization_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyCloudProviders/Providers/AmazonWebServices/new_credentials/credentials.py:
  🚨 Line 211: direct_query (in_or_notin_)
     Code: AwsIamAccessKeyConfig.id.in_(session.query(orphaned_keys_subquery.c.id))
     Arg:  session.query(orphaned_keys_subquery.c.id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyCloudProviders/actions/aws/tagging.py:
  🟡 Line 345: possible_row_attribute (==)
     Code: category == ResourceType.BIG_DATA_SNAPSHOT
     Arg:  ResourceType.BIG_DATA_SNAPSHOT

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/data_collections/__init__.py:
  🟡 Line 51: possible_row_attribute (==)
     Code: CollectionData.id == CollectionLink.data_id
     Arg:  CollectionLink.data_id

  🟡 Line 93: possible_row_attribute (==)
     Code: CollectionData.id == CollectionLink.data_id
     Arg:  CollectionLink.data_id

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/advanced_filtering/filtering.py:
  ⚠️  Line 312: query_variable (in_or_notin_)
     Code: filter_column.notin_(subq)
     Arg:  subq

  ⚠️  Line 313: query_variable (in_or_notin_)
     Code: filter_column.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyUtils/test_misc.py:
  🟡 Line 24: possible_row_variable (==)
     Code: DivvyUtils.misc.convert_bytes_human_readable(10000000, 1) == megabytes_rounded_one
     Arg:  megabytes_rounded_one

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyUtils/test_regex_validator.py:
  🟡 Line 18: possible_row_variable (==)
     Code: validate_regex(expression) == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyBlueprints/v4/iam_identity_management/test_utils.py:
  🟡 Line 19: possible_row_variable (==)
     Code: optional_bool_to_str(optional_bool) == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyBlueprints/v3/dspm/test_sensitivedata.py:
  🟡 Line 75: possible_row_variable (==)
     Code: res == expected_result
     Arg:  expected_result

  🟡 Line 172: possible_row_variable (==)
     Code: res == expected_result
     Arg:  expected_result

  🟡 Line 228: possible_row_variable (==)
     Code: res == expected_result
     Arg:  expected_result

  🟡 Line 323: possible_row_variable (==)
     Code: res == expected_result
     Arg:  expected_result

  🟡 Line 357: possible_row_variable (==)
     Code: res == expected_result
     Arg:  expected_result

  🟡 Line 402: possible_row_variable (==)
     Code: res == expected_result
     Arg:  expected_result

  🟡 Line 567: possible_row_variable (==)
     Code: res == expected_result
     Arg:  expected_result

  🟡 Line 748: possible_row_variable (==)
     Code: res == expected_result
     Arg:  expected_result

  🟡 Line 801: possible_row_variable (==)
     Code: res == expected_result
     Arg:  expected_result

  🟡 Line 849: possible_row_variable (==)
     Code: res == expected_result
     Arg:  expected_result

  🟡 Line 894: possible_row_variable (==)
     Code: res == expected_result
     Arg:  expected_result

  🟡 Line 1084: possible_row_variable (==)
     Code: res == expected_result
     Arg:  expected_result

  🟡 Line 1282: possible_row_variable (==)
     Code: res == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyIam/lpa/test_permissions.py:
  🟡 Line 60: possible_row_variable (==)
     Code: output == DATA_PLANE
     Arg:  DATA_PLANE

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/OracleCloud/Harvesters/utils.py:
  🟡 Line 12: possible_row_attribute (==)
     Code: result.data_retention_period == expected_data.data_retention_period
     Arg:  expected_data.data_retention_period

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/MicrosoftAzureArm/db_server_handlers/test_azure_sql_handler.py:
  🟡 Line 87: possible_row_variable (==)
     Code: handler.get_multi_az() == expected_result
     Arg:  expected_result

  🟡 Line 202: possible_row_variable (==)
     Code: handler.get_public_network_access() == expected_result
     Arg:  expected_result

  🟡 Line 254: possible_row_variable (==)
     Code: handler.get_infrastructure_encryption() == expected_result
     Arg:  expected_result

  🟡 Line 271: possible_row_variable (==)
     Code: handler.get_private_endpoint_connection_count() == expected_result
     Arg:  expected_result

  🟡 Line 380: possible_row_variable (==)
     Code: result == expected_result
     Arg:  expected_result

  🟡 Line 383: possible_row_variable (==)
     Code: handler._encryption_settings == expected_result
     Arg:  expected_result

  🟡 Line 424: possible_row_variable (==)
     Code: handler.get_encryption_type() == expected_result
     Arg:  expected_result

  🟡 Line 461: possible_row_variable (==)
     Code: handler.get_encryption_key_id() == expected_result
     Arg:  expected_result

  🟡 Line 547: possible_row_variable (==)
     Code: handler.get_advanced_data_security_settings() == expected_result
     Arg:  expected_result

  🟡 Line 564: possible_row_variable (==)
     Code: handler._databases == fake_db_result
     Arg:  fake_db_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/MicrosoftAzureArm/db_server_handlers/test_single_handler.py:
  🟡 Line 312: possible_row_variable (==)
     Code: handler.get_multi_az() == expected_result
     Arg:  expected_result

  🟡 Line 329: possible_row_variable (==)
     Code: handler.get_transit_encryption() == expected_result
     Arg:  expected_result

  🟡 Line 348: possible_row_variable (==)
     Code: handler.get_min_tls_version() == expected_result
     Arg:  expected_result

  🟡 Line 367: possible_row_variable (==)
     Code: handler.get_private_endpoint_connection_count() == expected_result
     Arg:  expected_result

  🟡 Line 388: possible_row_variable (==)
     Code: handler.get_public_network_access() == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/MicrosoftAzureArm/db_server_handlers/test_managed_azure_sql_handler.py:
  🟡 Line 178: possible_row_variable (==)
     Code: result == expected_result
     Arg:  expected_result

  🟡 Line 181: possible_row_variable (==)
     Code: handler._encryption_settings == expected_result
     Arg:  expected_result

  🟡 Line 222: possible_row_variable (==)
     Code: handler.get_encryption_type() == expected_result
     Arg:  expected_result

  🟡 Line 259: possible_row_variable (==)
     Code: handler.get_encryption_key_id() == expected_result
     Arg:  expected_result

  🟡 Line 286: possible_row_variable (==)
     Code: handler.get_at_rest_encryption() == expected_result
     Arg:  expected_result

  🟡 Line 391: possible_row_variable (==)
     Code: handler.get_private_endpoint_connection_count() == expected_result
     Arg:  expected_result

  🟡 Line 450: possible_row_variable (==)
     Code: handler.get_advanced_data_security_settings() == expected_result
     Arg:  expected_result

  🟡 Line 467: possible_row_variable (==)
     Code: handler._databases == fake_db_result
     Arg:  fake_db_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/MicrosoftAzureArm/db_server_handlers/test_flexible_handler.py:
  🟡 Line 132: possible_row_variable (==)
     Code: flexible_handler.get_transit_encryption() == expected_result
     Arg:  expected_result

  🟡 Line 169: possible_row_variable (==)
     Code: handler.get_engine_port_number() == expected_result
     Arg:  expected_result

  🟡 Line 186: possible_row_variable (==)
     Code: flexible_handler.get_public_network_access() == expected_result
     Arg:  expected_result

  🟡 Line 199: possible_row_variable (==)
     Code: handler.get_engine_type() == expected_result
     Arg:  expected_result

  🟡 Line 401: possible_row_variable (==)
     Code: handler.get_infrastructure_encryption() == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/AmazonWebServices/test_backend.py:
  🟡 Line 1045: possible_row_variable (==)
     Code: results == mock_get_password_data_response
     Arg:  mock_get_password_data_response

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/AmazonWebServices/test_utils.py:
  🟡 Line 115: possible_row_variable (==)
     Code: access_info.get('accessible_by_everyone') == everyone
     Arg:  everyone

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/AmazonWebServices/source/wafv2/test_backend.py:
  🟡 Line 188: possible_row_variable (==)
     Code: result == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/AmazonWebServices/source/elasticache/test_convert_memcache_instance.py:
  🟡 Line 155: possible_row_attribute (==)
     Code: actual.availability_zone == expected.availability_zone
     Arg:  expected.availability_zone

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/AmazonWebServices/source/elasticache/test_convert_serverless_snapshot.py:
  🟡 Line 83: possible_row_attribute (==)
     Code: actual.availability_zone == expected.availability_zone
     Arg:  expected.availability_zone

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/AmazonWebServices/source/elasticache/test_convert_serverless_cache.py:
  🟡 Line 111: possible_row_attribute (==)
     Code: actual.availability_zone == expected.availability_zone
     Arg:  expected.availability_zone

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/AmazonWebServices/source/ec2/test_convert_ec2_subnet.py:
  🟡 Line 118: possible_row_attribute (==)
     Code: actual.availability_zone == expected.availability_zone
     Arg:  expected.availability_zone

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/AmazonWebServices/Actions/test_dns_record.py:
  🟡 Line 49: possible_row_variable (==)
     Code: updated_records == new_records
     Arg:  new_records

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/AmazonWebServices/Actions/storagecontainer/test_get_storage_container_cors_policy.py:
  🟡 Line 85: possible_row_variable (==)
     Code: result_dict == expected_result_dict
     Arg:  expected_result_dict

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/AmazonWebServices/Actions/storagecontainer/test_update_storage_container_acl.py:
  🟡 Line 168: possible_row_variable (==)
     Code: result == expected_result
     Arg:  expected_result

  🟡 Line 199: possible_row_variable (==)
     Code: result == expected_result
     Arg:  expected_result

  🟡 Line 268: possible_row_variable (==)
     Code: result == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/AmazonWebServices/Actions/iam/test_update_access_key_status.py:
  🟡 Line 40: possible_row_variable (==)
     Code: result == fake_iam_client_result
     Arg:  fake_iam_client_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/AmazonWebServices/Actions/iam/test_delete_access_key.py:
  🟡 Line 37: possible_row_variable (==)
     Code: result == fake_iam_client_result
     Arg:  fake_iam_client_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/AmazonWebServices/Actions/rds/test_restart_database.py:
  🟡 Line 33: possible_row_variable (==)
     Code: result == restart_database_instance_action_expected_result
     Arg:  restart_database_instance_action_expected_result

  🟡 Line 58: possible_row_variable (==)
     Code: result == restart_database_instance_action_expected_result
     Arg:  restart_database_instance_action_expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/AmazonWebServices/Actions/ec2/test_disassociate_address.py:
  🟡 Line 31: possible_row_variable (==)
     Code: result == fake_ec2_client_result
     Arg:  fake_ec2_client_result

  🟡 Line 53: possible_row_variable (==)
     Code: result == fake_ec2_client_result
     Arg:  fake_ec2_client_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Providers/AmazonWebServices/Actions/ec2/test_associate_address.py:
  🟡 Line 38: possible_row_variable (==)
     Code: result == fake_ec2_client_result
     Arg:  fake_ec2_client_result

  🟡 Line 68: possible_row_variable (==)
     Code: result == fake_ec2_client_result
     Arg:  fake_ec2_client_result

  🟡 Line 93: possible_row_variable (==)
     Code: result == fake_ec2_client_result
     Arg:  fake_ec2_client_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyCloudProviders/Common/Backend/test_backend.py:
  🟡 Line 135: possible_row_variable (==)
     Code: result == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/host_assessment/test_common.py:
  🟡 Line 328: possible_row_variable (==)
     Code: result == TEST_SNAPSHOT_RESULT
     Arg:  TEST_SNAPSHOT_RESULT

  🟡 Line 435: possible_row_variable (==)
     Code: result == TEST_SNAPSHOT_RESULT
     Arg:  TEST_SNAPSHOT_RESULT

  🟡 Line 475: possible_row_variable (==)
     Code: result == TEST_SNAPSHOT_RESULT
     Arg:  TEST_SNAPSHOT_RESULT

  🟡 Line 671: possible_row_variable (==)
     Code: result == TEST_SNAPSHOT_RESULT
     Arg:  TEST_SNAPSHOT_RESULT

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/apa/test_pathpostprocessor.py:
  🟡 Line 430: possible_row_variable (==)
     Code: remove_port_range(existing_ranges, port_range) == expected_result
     Arg:  expected_result

  🟡 Line 461: possible_row_variable (==)
     Code: add_port_range(existing_ranges, new_range) == expected_result
     Arg:  expected_result

  🟡 Line 503: possible_row_variable (==)
     Code: result == expected_result
     Arg:  expected_result

  🟡 Line 691: possible_row_variable (==)
     Code: result == expected_result
     Arg:  expected_result

  🟡 Line 1349: possible_row_variable (==)
     Code: result == expected_result
     Arg:  expected_result

  🟡 Line 2745: possible_row_variable (==)
     Code: result == expected_result
     Arg:  expected_result

  🟡 Line 2821: possible_row_variable (==)
     Code: result == expected_result
     Arg:  expected_result

  🟡 Line 2897: possible_row_variable (==)
     Code: result == expected_result
     Arg:  expected_result

  🟡 Line 2977: possible_row_variable (==)
     Code: result == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyWorkers/Processors/test_ContainerImageScanner.py:
  🟡 Line 197: possible_row_variable (==)
     Code: result == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyDb/DbObjects/comparison/comparators/test_json_compare.py:
  🟡 Line 26: possible_row_variable (==)
     Code: is_json_equal(local, remote) == expected_result
     Arg:  expected_result

  🟡 Line 27: possible_row_variable (==)
     Code: is_json_equal(remote, local) == expected_result
     Arg:  expected_result

  🟡 Line 33: possible_row_variable (==)
     Code: is_json_str_equal(local, remote) == expected_result
     Arg:  expected_result

  🟡 Line 34: possible_row_variable (==)
     Code: is_json_str_equal(remote, local) == expected_result
     Arg:  expected_result

  🟡 Line 42: possible_row_variable (==)
     Code: is_json_str_equal(local_str, remote_str) == expected_result
     Arg:  expected_result

  🟡 Line 43: possible_row_variable (==)
     Code: is_json_str_equal(remote_str, local_str) == expected_result
     Arg:  expected_result

  🟡 Line 169: possible_row_variable (==)
     Code: compare_json_sorted(key='priority')(local, remote) == expected_result
     Arg:  expected_result

  🟡 Line 314: possible_row_variable (==)
     Code: compare_json_sorted(key='priority', nested={'rules': 'id'})(local, remote) == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyDb/DbObjects/comparison/schemas/test_complete_schema.py:
  🟡 Line 54: possible_row_variable (==)
     Code: schema.comparators == expected_result
     Arg:  expected_result

  🟡 Line 128: possible_row_variable (==)
     Code: schema.comparators == expected_result
     Arg:  expected_result

  🟡 Line 174: possible_row_variable (==)
     Code: schema.comparators == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyDb/DbObjects/comparison/schemas/test_exclude_schema.py:
  🟡 Line 44: possible_row_variable (==)
     Code: schema.comparators == expected_result
     Arg:  expected_result

  🟡 Line 80: possible_row_variable (==)
     Code: schema.comparators == expected_result
     Arg:  expected_result

  🟡 Line 117: possible_row_variable (==)
     Code: schema.comparators == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyDb/DbObjects/comparison/schemas/test_include_schema.py:
  🟡 Line 40: possible_row_variable (==)
     Code: schema.comparators == expected_result
     Arg:  expected_result

  🟡 Line 73: possible_row_variable (==)
     Code: schema.comparators == expected_result
     Arg:  expected_result

  🟡 Line 106: possible_row_variable (==)
     Code: schema.comparators == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyDb/DbObjects/comparison/schemas/test_base_schema.py:
  🟡 Line 76: possible_row_variable (==)
     Code: compare_list == expected_result
     Arg:  expected_result

  🟡 Line 101: possible_row_variable (==)
     Code: (lhs == rhs) == expected_result
     Arg:  expected_result

  🟡 Line 102: possible_row_variable (!=)
     Code: (lhs != rhs) != expected_result
     Arg:  expected_result

  🟡 Line 143: possible_row_variable (==)
     Code: (lhs < rhs) == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/DivvyDb/DbObjects/jobs/test_self_enqueuing_startup_job.py:
  🟡 Line 235: possible_row_variable (==)
     Code: job.row_count == row_count
     Arg:  row_count

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/unit/layered_context/test_public_accessibility.py:
  🟡 Line 32: possible_row_attribute (==)
     Code: rt == ResourceType.DATABASE_INSTANCE
     Arg:  ResourceType.DATABASE_INSTANCE

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/DivvyBlueprints/v2/prototype/test_v2_system.py:
  🟡 Line 516: possible_row_variable (==)
     Code: len(resp.json['data']) == expected_resp_data_size
     Arg:  expected_resp_data_size

  🟡 Line 1241: possible_row_variable (==)
     Code: len(resp.json['data']) == expected_resp_data_size
     Arg:  expected_resp_data_size

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/DivvyBlueprints/v4/test_v4_gatekeeper.py:
  🟡 Line 114: possible_row_variable (==)
     Code: modified_constraint_from_res['id'] == cloned_id
     Arg:  cloned_id

  🟡 Line 127: possible_row_variable (==)
     Code: modified_from_query['id'] == cloned_id
     Arg:  cloned_id

  🟡 Line 143: possible_row_variable (==)
     Code: modified_constraint_from_res['id'] == cloned_id
     Arg:  cloned_id

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/DivvyBlueprints/v3/iam/api/iam_explorer/test_filtering.py:
  🟡 Line 145: possible_row_variable (==)
     Code: results_by_type == results
     Arg:  results

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/DivvyBlueprints/v3/iam/api/lpa/test_config.py:
  🟡 Line 80: possible_row_variable (==)
     Code: r.get_json() == initial_data
     Arg:  initial_data

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/DivvyIam/test_infrastructure.py:
  🟡 Line 491: possible_row_variable (==)
     Code: formatted_rows == expected_rows
     Arg:  expected_rows

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/DivvyIac/terraform/test_parsers.py:
  🟡 Line 144: possible_row_variable (==)
     Code: vpc.provider_metadata.address == dns_zone_vpc_id
     Arg:  dns_zone_vpc_id

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/advanced_filtering/test_filtering.py:
  🟡 Line 137: possible_row_variable (==)
     Code: db.session.query(A).filter(operate_on(filter_col)(Box(op=op, value=val))).count() == result
     Arg:  result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/DivvyPermissions/test_security_tokens_supporting_views.py:
  🟡 Line 998: possible_row_variable (==)
     Code: set(actual_result) == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/DivvyPermissions/test_RolePermissions.py:
  ⚠️  Line 352: query_variable (in_or_notin_)
     Code: db_obj.organization_service_id.in_(subquery1)
     Arg:  subquery1

  🟡 Line 517: possible_row_variable (==)
     Code: [both.name] == results
     Arg:  results

  🟡 Line 527: possible_row_variable (==)
     Code: [both.name] == data_mesh_results
     Arg:  data_mesh_results

  🟡 Line 697: possible_row_variable (==)
     Code: [no_badges.name] == results
     Arg:  results

  🟡 Line 707: possible_row_variable (==)
     Code: [no_badges.name] == data_mesh_results
     Arg:  data_mesh_results

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/apa/test_pathdbrepository.py:
  🟡 Line 391: possible_row_variable (==)
     Code: results == expected_results
     Arg:  expected_results

  🟡 Line 409: possible_row_variable (==)
     Code: results == expected_results
     Arg:  expected_results

  🟡 Line 422: possible_row_variable (==)
     Code: results == expected_results
     Arg:  expected_results

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/DivvyWorkers/Processors/Processors/test_ContainerImageScanner.py:
  🟡 Line 84: possible_row_variable (==)
     Code: digest_with_report == report_data
     Arg:  report_data

  🟡 Line 104: possible_row_variable (==)
     Code: report_record == report_data
     Arg:  report_data

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/DivvyDb/DbObjects/test_badges.py:
  🟡 Line 8: possible_row_variable (==)
     Code: key_set == expected_result
     Arg:  expected_result

  🟡 Line 20: possible_row_variable (==)
     Code: key_set == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/DivvyDb/QueryFilters/test_subnets.py:
  🚨 Line 770: direct_query (in_or_notin_)
     Code: DbObjects.NetworkSubnet.organization_service_id.in_(db.session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.cloud_type_id.in_(['AZURE_ARM', 'AZURE_GOV'])))
     Arg:  db.session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.cloud_type_id.in_(['AZURE_ARM', 'AZURE_GOV']))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/DivvyDb/QueryFilters/test_organization_services.py:
  🟡 Line 4316: possible_row_variable (==)
     Code: {r.name for r in org_services_qfs.cloud_account_not_using_key_vault(query=query, db_cls=OrganizationService, settings_config={})} == expected_results
     Arg:  expected_results

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/layered_context/test_aggregator.py:
  🟡 Line 166: possible_row_attribute (==)
     Code: resource.vulnerability_none == fixture.vulnerability.none_count
     Arg:  fixture.vulnerability.none_count

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/tests/integration/layered_context/test_public_accessibility.py:
  🟡 Line 418: possible_row_variable (==)
     Code: results == expected_result
     Arg:  expected_result

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyJobs/futures.py:
  🟡 Line 54: possible_row_attribute (==)
     Code: self._status == Future.DONE
     Arg:  Future.DONE

  🟡 Line 76: possible_row_attribute (==)
     Code: self.status == Future.DONE
     Arg:  Future.DONE

  🟡 Line 168: possible_row_attribute (==)
     Code: self.status == Future.DONE
     Arg:  Future.DONE

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/libcloud/storage/drivers/cloudfiles.py:
  🟡 Line 675: possible_row_variable (!=)
     Code: object_hash != data_hash
     Arg:  data_hash

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/libcloud/common/openstack.py:
  🟡 Line 216: possible_row_variable (!=)
     Code: self != ex_clone_connection
     Arg:  ex_clone_connection

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/libcloud/compute/drivers/softlayer.py:
  🟡 Line 578: possible_row_variable (==)
     Code: location['name'] == datacenter
     Arg:  datacenter

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/libcloud/compute/drivers/vsphere.py:
  🟡 Line 875: possible_row_variable (==)
     Code: view.name == datacenter_name
     Arg:  datacenter_name

  🟡 Line 1129: possible_row_variable (!=)
     Code: datacenter.name != datacenter_id
     Arg:  datacenter_id

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/libcloud/dns/drivers/zerigo.py:
  🟡 Line 477: possible_row_variable (>=)
     Code: params['page'] * ITEMS_PER_PAGE >= result_count
     Arg:  result_count

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/libcloud/dns/drivers/route53.py:
  🟡 Line 170: possible_row_variable (!=)
     Code: record.type != record_type_num
     Arg:  record_type_num

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyCloudCostCalculator/aws/ec2.py:
  🟡 Line 581: possible_row_attribute (==)
     Code: resource_id.get_type() == ResourceType.BIG_DATA_INSTANCE
     Arg:  ResourceType.BIG_DATA_INSTANCE

  🟡 Line 595: possible_row_attribute (==)
     Code: resource_id.get_type() == ResourceType.DATABASE_INSTANCE
     Arg:  ResourceType.DATABASE_INSTANCE

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/apa/edge.py:
  🚨 Line 3352: direct_query (in_or_notin_)
     Code: ResourceAccessList.resource_id.in_(session.query(ResourceAccessListRule.parent_resource_id.distinct()).filter(ResourceAccessListRule.direction == 'ingress', ResourceAccessListRule.organization_service_id == organization_service_id))
     Arg:  session.query(ResourceAccessListRule.parent_resource_id.distinct()).filter(ResourceAccessListRule.direction == 'ingress', ResourceAccessListRule.organization_service_id == organization_service_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/apa/pathdbrepository.py:
  🟡 Line 608: possible_row_attribute (==)
     Code: NetworkIpAddress.public_ip == DnsZoneRecord.data
     Arg:  DnsZoneRecord.data

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/apa/definitions/azure_log_access_calculator.py:
  🟡 Line 151: possible_row_variable (==)
     Code: ServiceManagedPolicy.policy_name == data_sink_reader_role
     Arg:  data_sink_reader_role

  🟡 Line 227: possible_row_variable (==)
     Code: Path.id == data_path_id
     Arg:  data_path_id

  🟡 Line 239: possible_row_variable (==)
     Code: PathComponent.path_id == data_path_id
     Arg:  data_path_id

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/OnDemand/DNSRecordLifecycle.py:
  🟡 Line 201: possible_row_attribute (==)
     Code: record.record_id == self.dnsrecord_resource_id.record_id
     Arg:  self.dnsrecord_resource_id.record_id

  🟡 Line 309: possible_row_attribute (==)
     Code: record.record_id == self.dnsrecord_resource_id.record_id
     Arg:  self.dnsrecord_resource_id.record_id

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/ResourceGroupInsightPackFindings.py:
  🚨 Line 329: direct_query (in_or_notin_)
     Code: ResourceGroup.organization_id.in_(session.query(Organization.organization_id).filter(Organization.simulated.is_(False)))
     Arg:  session.query(Organization.organization_id).filter(Organization.simulated.is_(False))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/ApiActivityProcessor.py:
  🚨 Line 74: direct_query (in_or_notin_)
     Code: OrganizationSetting.resource_id.in_(session.query(OrganizationSetting.resource_id).filter(OrganizationSetting.name.like(api_activity_like_stmt)))
     Arg:  session.query(OrganizationSetting.resource_id).filter(OrganizationSetting.name.like(api_activity_like_stmt))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/ResourceLockProcessor.py:
  🚨 Line 78: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(DbObjects.ResourceLink.right_resource_id).filter(DbObjects.ResourceLink.left_resource_id == locked_resource.resource_id))
     Arg:  session.query(DbObjects.ResourceLink.right_resource_id).filter(DbObjects.ResourceLink.left_resource_id == locked_resource.resource_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/GCPOrganizationOnboardingKickoff.py:
  🚨 Line 313: direct_query (in_or_notin_)
     Code: OrganizationService.organization_service_id.notin_(db_session.query(Badge.organization_service_id).filter(Badge.key == 'system.cloud_organization', Badge.value == domain.domain_name))
     Arg:  db_session.query(Badge.organization_service_id).filter(Badge.key == 'system.cloud_organization', Badge.value == domain.domain_name)

  🚨 Line 350: direct_query (in_or_notin_)
     Code: OrganizationService.organization_service_id.in_(db_session.query(Badge.organization_service_id).filter(Badge.key == 'system.cloud_organization', Badge.value == domain.domain_name))
     Arg:  db_session.query(Badge.organization_service_id).filter(Badge.key == 'system.cloud_organization', Badge.value == domain.domain_name)

  🚨 Line 497: direct_query (in_or_notin_)
     Code: Badge.target_resource_id.in_(session.query(OrganizationService.resource_id).filter(OrganizationService.cloud_type_id == domain.cloud_type_id, OrganizationService.organization_id == domain.organization_id, OrganizationService.cloud_organization_id == domain.domain_id))
     Arg:  session.query(OrganizationService.resource_id).filter(OrganizationService.cloud_type_id == domain.cloud_type_id, OrganizationService.organization_id == domain.organization_id, OrganizationService.cloud_organization_id == domain.domain_id)

  🚨 Line 566: direct_query (in_or_notin_)
     Code: OrganizationService.resource_id.notin_(session.query(Badge.target_resource_id).filter(Badge.key == 'system.cloud_organization').filter(Badge.value == domain.domain_name))
     Arg:  session.query(Badge.target_resource_id).filter(Badge.key == 'system.cloud_organization').filter(Badge.value == domain.domain_name)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/InactiveUserScan.py:
  🟡 Line 69: possible_row_attribute (==)
     Code: CollectionData.id == CollectionLink.data_id
     Arg:  CollectionLink.data_id

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/ComplianceTimeseries.py:
  🚨 Line 35: direct_query (in_or_notin_)
     Code: Organization.organization_id.in_(db.session.query(OrganizationService.organization_id).group_by(OrganizationService.organization_id).having(func.count(OrganizationService.organization_service_id) > 0))
     Arg:  db.session.query(OrganizationService.organization_id).group_by(OrganizationService.organization_id).having(func.count(OrganizationService.organization_service_id) > 0)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/K8SProductAnalyticsReport.py:
  🟡 Line 97: possible_row_variable (>)
     Code: KubernetesClusterScanStatus.last_scanned > one_day_ago
     Arg:  one_day_ago

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/HostAssessmentInstanceCheck.py:
  🚨 Line 185: direct_query (in_or_notin_)
     Code: Instance.resource_id.notin_(db.session.query(Instance.resource_id).join(AutoscalingGroup, AutoscalingGroup.resource_id == Instance.parent_resource_id).join(ORG_ALIAS, ORG_ALIAS.organization_service_id == Instance.organization_service_id).filter(ORG_ALIAS.cloud_type_id == CloudType.AMAZON_WEB_SERVICES))
     Arg:  db.session.query(Instance.resource_id).join(AutoscalingGroup, AutoscalingGroup.resource_id == Instance.parent_resource_id).join(ORG_ALIAS, ORG_ALIAS.organization_service_id == Instance.organization_service_id).filter(ORG_ALIAS.cloud_type_id == CloudType.AMAZON_WEB_SERVICES)

  🚨 Line 269: direct_query (in_or_notin_)
     Code: Instance.resource_id.notin_(db.session.query(VMResource.resource_id).filter(VMResource.organization_service_id.in_(org_service_ids)).filter(VMResource.type == ResourceType.INSTANCE))
     Arg:  db.session.query(VMResource.resource_id).filter(VMResource.organization_service_id.in_(org_service_ids)).filter(VMResource.type == ResourceType.INSTANCE)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/HostAssessmentLifecycleSnapshotCleanup.py:
  🚨 Line 54: direct_query (in_or_notin_)
     Code: Snapshot.organization_service_id.in_(db.session.query(OrganizationService.organization_service_id))
     Arg:  db.session.query(OrganizationService.organization_service_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/InsightTimeseries.py:
  🚨 Line 53: direct_query (in_or_notin_)
     Code: Organization.organization_id.notin_(session.query(OrganizationService.organization_id))
     Arg:  session.query(OrganizationService.organization_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/SimulatedResourceCleanup.py:
  🚨 Line 40: direct_query (in_or_notin_)
     Code: Badge.organization_service_id.notin_(session.query(OrganizationService.organization_service_id))
     Arg:  session.query(OrganizationService.organization_service_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/ContainerImageScanManager.py:
  ⚠️  Line 97: query_variable (in_or_notin_)
     Code: OrganizationService.organization_id.notin_(disabled_orgs_subquery)
     Arg:  disabled_orgs_subquery

  ⚠️  Line 265: query_variable (in_or_notin_)
     Code: OrganizationService.organization_id.notin_(disabled_orgs_subquery)
     Arg:  disabled_orgs_subquery

  🚨 Line 301: direct_query (in_or_notin_)
     Code: ImageDigest.digest.notin_(self.session.query(ImageDigestImage.digest))
     Arg:  self.session.query(ImageDigestImage.digest)

  ⚠️  Line 453: query_variable (in_or_notin_)
     Code: OrganizationService.organization_id.in_(disabled_orgs_subquery)
     Arg:  disabled_orgs_subquery

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/OrphanedResourceCleanup.py:
  🚨 Line 296: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(session.query(DbObjects.OrganizationService.organization_service_id))
     Arg:  session.query(DbObjects.OrganizationService.organization_service_id)

  ⚠️  Line 366: query_variable (in_or_notin_)
     Code: table.organization_service_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 368: query_variable (in_or_notin_)
     Code: table.organization_service_id.notin_(subq)
     Arg:  subq

  🚨 Line 384: direct_query (in_or_notin_)
     Code: DbObjects.ResourceGroup.organization_service_id.notin_(session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.cloud_type_id.in_(['AZURE_ARM', 'AZURE_CHINA', 'AZURE_GOV', 'K8S_R7'])))
     Arg:  session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.cloud_type_id.in_(['AZURE_ARM', 'AZURE_CHINA', 'AZURE_GOV', 'K8S_R7']))

  🚨 Line 850: direct_query (in_or_notin_)
     Code: DbObjects.HarvestStrategy.organization_id.notin_(session.query(DbObjects.Organization.organization_id).filter(DbObjects.Organization.status == DbObjects.Organization.Status.OK))
     Arg:  session.query(DbObjects.Organization.organization_id).filter(DbObjects.Organization.status == DbObjects.Organization.Status.OK)

  🚨 Line 885: direct_query (in_or_notin_)
     Code: getattr(db_cls, config['resource_id_col']).notin_(session.query(config['parent'].resource_id))
     Arg:  session.query(config['parent'].resource_id)

  🚨 Line 1039: direct_query (in_or_notin_)
     Code: DbObjects.OrganizationService.organization_id.in_(session.query(DbObjects.Organization.organization_id).filter(DbObjects.Organization.simulated.is_(False)))
     Arg:  session.query(DbObjects.Organization.organization_id).filter(DbObjects.Organization.simulated.is_(False))

  🚨 Line 1074: direct_query (in_or_notin_)
     Code: DbObjects.OrganizationService.organization_id.in_(session.query(DbObjects.Organization.organization_id).filter(DbObjects.Organization.simulated.is_(False)))
     Arg:  session.query(DbObjects.Organization.organization_id).filter(DbObjects.Organization.simulated.is_(False))

  ⚠️  Line 1405: query_variable (in_or_notin_)
     Code: table.organization_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/AuthenticationServerUserSync.py:
  🚨 Line 268: direct_query (in_or_notin_)
     Code: AS.server_id.in_(session.query(ASGM.server_id).filter(ASGM.organization_id == organization_id))
     Arg:  session.query(ASGM.server_id).filter(ASGM.organization_id == organization_id)

  🚨 Line 1574: direct_query (in_or_notin_)
     Code: DbObjects.UserGroupUser.group_id.in_(session.query(DbObjects.UserGroup.group_id).filter(DbObjects.UserGroup.organization_id == organization_id, DbObjects.UserGroup.group_id == DbObjects.UserGroupUser.group_id, DbObjects.UserGroup.group_id.notin_(mapped_divvy_group_ids), DbObjects.UserGroup.system_managed.is_(False)))
     Arg:  session.query(DbObjects.UserGroup.group_id).filter(DbObjects.UserGroup.organization_id == organization_id, DbObjects.UserGroup.group_id == DbObjects.UserGroupUser.group_id, DbObjects.UserGroup.group_id.notin_(mapped_divvy_group_ids), DbObjects.UserGroup.system_managed.is_(False))

  🚨 Line 1584: direct_query (in_or_notin_)
     Code: DbObjects.UserGroupUser.user_id.in_(session.query(DbObjects.User.user_id).filter(DbObjects.User.authentication_server_id == server_id))
     Arg:  session.query(DbObjects.User.user_id).filter(DbObjects.User.authentication_server_id == server_id)

  🚨 Line 1618: direct_query (in_or_notin_)
     Code: DbObjects.UserGroup.group_id.notin_(session.query(DbObjects.UserGroupUser.group_id).filter(DbObjects.UserGroupUser.user_id == user_id))
     Arg:  session.query(DbObjects.UserGroupUser.group_id).filter(DbObjects.UserGroupUser.user_id == user_id)

  🚨 Line 1646: direct_query (in_or_notin_)
     Code: DbObjects.UserGroupUser.group_id.in_(session.query(DbObjects.UserGroup.group_id).filter(DbObjects.UserGroup.group_id.in_(mapped_divvy_group_ids), DbObjects.UserGroup.group_id.notin_(group_ids), DbObjects.UserGroup.organization_id == organization_id))
     Arg:  session.query(DbObjects.UserGroup.group_id).filter(DbObjects.UserGroup.group_id.in_(mapped_divvy_group_ids), DbObjects.UserGroup.group_id.notin_(group_ids), DbObjects.UserGroup.organization_id == organization_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/HostPerimeterScanEnqueue.py:
  🟡 Line 106: possible_row_attribute (==)
     Code: NetworkInterface.public_ip_address == DnsZoneRecord.data
     Arg:  DnsZoneRecord.data

  🟡 Line 114: possible_row_attribute (==)
     Code: NetworkInterface.public_dns_name == DnsZoneRecord.data_sanitised
     Arg:  DnsZoneRecord.data_sanitised

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/ContainerImageScanner.py:
  ⚠️  Line 671: query_variable (in_or_notin_)
     Code: OrganizationService.organization_id.notin_(disabled_orgs_subquery)
     Arg:  disabled_orgs_subquery

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/IncompletePermissionScan.py:
  🚨 Line 44: direct_query (in_or_notin_)
     Code: OrganizationService.organization_id.in_(session.query(Organization.organization_id).filter(Organization.simulated.is_(False)))
     Arg:  session.query(Organization.organization_id).filter(Organization.simulated.is_(False))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/K8SRemoteScannerManager.py:
  ⚠️  Line 599: query_variable (in_or_notin_)
     Code: KubernetesClusterScanStatus.k8s_org_service_id.in_(clusters_with_multiple_status_subquery)
     Arg:  clusters_with_multiple_status_subquery

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/InsightPackFindings.py:
  🚨 Line 367: direct_query (in_or_notin_)
     Code: OrganizationService.organization_id.in_(session.query(Organization.organization_id).filter(Organization.simulated.is_(False)))
     Arg:  session.query(Organization.organization_id).filter(Organization.simulated.is_(False))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Processors/apa/AttackPathProcessor.py:
  🟡 Line 409: possible_row_attribute (==)
     Code: SourceNode.id == AttackPath.first_node_id
     Arg:  AttackPath.first_node_id

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Harvesters/base.py:
  🟡 Line 1079: possible_row_variable (!=)
     Code: stale_harvester_run_time_data != fresh_harvester_runtime_data
     Arg:  fresh_harvester_runtime_data

  🟡 Line 2309: possible_row_attribute (==)
     Code: resource_type.availability_zone == location.availability_zone
     Arg:  location.availability_zone

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Harvesters/BaseHarvesters/InstanceMetadataServiceHarvest.py:
  🟡 Line 44: possible_row_attribute (==)
     Code: DbObjects.ResourceProperty.name == CorePropertyNames.metadata_no_token
     Arg:  CorePropertyNames.metadata_no_token

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Harvesters/BaseHarvesters/ServiceAccessKeyHarvest.py:
  🚨 Line 85: direct_query (in_or_notin_)
     Code: DbObjects.OrganizationService.organization_id.in_(db.session.query(DbObjects.OrganizationService.organization_id).filter(DbObjects.OrganizationService.organization_service_id == org_svc_id))
     Arg:  db.session.query(DbObjects.OrganizationService.organization_id).filter(DbObjects.OrganizationService.organization_service_id == org_svc_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Harvesters/BaseHarvesters/ResourceVulnerabilityHarvest.py:
  🟡 Line 186: possible_row_attribute (>=)
     Code: len(self._buffer) >= self.max_records
     Arg:  self.max_records

  🟡 Line 500: possible_row_attribute (==)
     Code: severity == VulnerabilitySeverity.NONE
     Arg:  VulnerabilitySeverity.NONE

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Harvesters/BaseHarvesters/ServiceAppHarvest.py:
  🚨 Line 62: direct_query (in_or_notin_)
     Code: OrganizationService.organization_id.in_(db.session.query(OrganizationService.organization_id).filter(OrganizationService.organization_service_id == org_svc_id))
     Arg:  db.session.query(OrganizationService.organization_id).filter(OrganizationService.organization_service_id == org_svc_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Harvesters/BaseHarvesters/SensitiveDataClassificationHarvest.py:
  🟡 Line 361: possible_row_attribute (==)
     Code: DbObjects.SensitiveDataResource.resource_id == row.sensitive_data_resource_id
     Arg:  row.sensitive_data_resource_id

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Harvesters/BaseHarvesters/PrivateSubnetHarvest.py:
  🚨 Line 113: direct_query (in_or_notin_)
     Code: DbObjects.RouteTable.resource_id.in_(db.session.query(DbObjects.RouteTableRoute.route_table_resource_id).filter(DbObjects.RouteTableRoute.target_type == 'gateway', DbObjects.RouteTableRoute.target_id.like('igw-%'), DbObjects.RouteTableRoute.state == 'active'))
     Arg:  db.session.query(DbObjects.RouteTableRoute.route_table_resource_id).filter(DbObjects.RouteTableRoute.target_type == 'gateway', DbObjects.RouteTableRoute.target_id.like('igw-%'), DbObjects.RouteTableRoute.state == 'active')

  🚨 Line 172: direct_query (in_or_notin_)
     Code: DbObjects.RouteTable.resource_id.in_(db.session.query(DbObjects.RouteTableRoute.route_table_resource_id).filter(DbObjects.RouteTableRoute.target_type == 'gateway', DbObjects.RouteTableRoute.target_id == 'Internet', DbObjects.RouteTableRoute.state == 'active'))
     Arg:  db.session.query(DbObjects.RouteTableRoute.route_table_resource_id).filter(DbObjects.RouteTableRoute.target_type == 'gateway', DbObjects.RouteTableRoute.target_id == 'Internet', DbObjects.RouteTableRoute.state == 'active')

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Harvesters/BaseHarvesters/AwsBillingDataHarvest.py:
  🚨 Line 307: direct_query (in_or_notin_)
     Code: DbObjects.ServiceCost.resource_id.notin_(db.session.query(DbObjects.ResourceCommonData.resource_id).filter(DbObjects.ResourceCommonData.resource_type == ResourceType.SERVICE_COST))
     Arg:  db.session.query(DbObjects.ResourceCommonData.resource_id).filter(DbObjects.ResourceCommonData.resource_type == ResourceType.SERVICE_COST)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Harvesters/BaseHarvesters/StackTemplateHarvest.py:
  ⚠️  Line 76: query_variable (in_or_notin_)
     Code: DbObjects.StackTemplateResource.stack_resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Harvesters/BaseHarvesters/FederatedPrincipalHarvest.py:
  🚨 Line 81: direct_query (in_or_notin_)
     Code: OrganizationService.organization_id.in_(db.session.query(OrganizationService.organization_id).filter(OrganizationService.organization_service_id == org_svc_id))
     Arg:  db.session.query(OrganizationService.organization_id).filter(OrganizationService.organization_service_id == org_svc_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Harvesters/BaseHarvesters/GcpBillingDataHarvest.py:
  🚨 Line 280: direct_query (in_or_notin_)
     Code: DbObjects.ServiceCost.resource_id.notin_(db.session.query(DbObjects.ResourceCommonData.resource_id).filter(DbObjects.ResourceCommonData.resource_type == ResourceType.SERVICE_COST))
     Arg:  db.session.query(DbObjects.ResourceCommonData.resource_id).filter(DbObjects.ResourceCommonData.resource_type == ResourceType.SERVICE_COST)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Harvesters/BaseHarvesters/InstanceResourceAgentHarvest.py:
  🚨 Line 57: direct_query (in_or_notin_)
     Code: DbObjects.ResourceAgent.instance_resource_id.notin_(db.session.query(DbObjects.ResourceCommonData.resource_id).filter(DbObjects.ResourceCommonData.pending_delete.is_(True)))
     Arg:  db.session.query(DbObjects.ResourceCommonData.resource_id).filter(DbObjects.ResourceCommonData.pending_delete.is_(True))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Harvesters/BaseHarvesters/ApplicationLoadBalancerHarvest.py:
  🚨 Line 124: direct_query (in_or_notin_)
     Code: resource_type.resource_id.notin_(session.query(DbObjects.ResourceCommonData.resource_id).filter(DbObjects.ResourceCommonData.pending_delete.is_(True), DbObjects.ResourceCommonData.resource_type == 'loadbalancer'))
     Arg:  session.query(DbObjects.ResourceCommonData.resource_id).filter(DbObjects.ResourceCommonData.pending_delete.is_(True), DbObjects.ResourceCommonData.resource_type == 'loadbalancer')

  🟡 Line 140: possible_row_attribute (==)
     Code: resource_type.availability_zone == location.availability_zone
     Arg:  location.availability_zone

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Harvesters/BaseHarvesters/DataStreamHarvest.py:
  🟡 Line 112: possible_row_variable (==)
     Code: DbObjects.DeliveryStream.source_stream_arn == data_stream_arn
     Arg:  data_stream_arn

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyWorkers/Harvesters/Global/LicenseHarvest.py:
  🚨 Line 143: direct_query (in_or_notin_)
     Code: OrganizationService.strategy_id.in_(session.query(HarvestStrategy.id).filter(HarvestStrategy.system_defined.is_(True)))
     Arg:  session.query(HarvestStrategy.id).filter(HarvestStrategy.system_defined.is_(True))

  🚨 Line 190: direct_query (in_or_notin_)
     Code: ContainerInstance.organization_service_id.in_(db.session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id == CloudType.KUBERNETES_SECURITY))
     Arg:  db.session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id == CloudType.KUBERNETES_SECURITY)

  🚨 Line 206: direct_query (in_or_notin_)
     Code: ServiceRole.organization_service_id.in_(db.session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id.in_([CloudType.AMAZON_WEB_SERVICES, CloudType.AMAZON_WEB_SERVICES_GOV, CloudType.AMAZON_WEB_SERVICES_CHINA])))
     Arg:  db.session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id.in_([CloudType.AMAZON_WEB_SERVICES, CloudType.AMAZON_WEB_SERVICES_GOV, CloudType.AMAZON_WEB_SERVICES_CHINA]))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyResource/ResourceLocation.py:
  🟡 Line 76: possible_row_attribute (==)
     Code: self.availability_zone == other.availability_zone
     Arg:  other.availability_zone

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyResource/Resources/divvybadge.py:
  ⚠️  Line 161: query_variable (in_or_notin_)
     Code: badge.target_resource_id.in_(query)
     Arg:  query

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyResource/Resources/divvyorganization.py:
  ⚠️  Line 934: query_variable (in_or_notin_)
     Code: ServiceEventHistory.event_id.in_(provider_query)
     Arg:  provider_query

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyResource/Resources/serviceuser.py:
  🚨 Line 169: direct_query (in_or_notin_)
     Code: DbObjects.ThreatFindingResource.affected_resource_id.in_(db.session.query(DbObjects.ServiceAccessKey.resource_id).filter(DbObjects.ServiceAccessKey.user_resource_id == str(self.resource_id)))
     Arg:  db.session.query(DbObjects.ServiceAccessKey.resource_id).filter(DbObjects.ServiceAccessKey.user_resource_id == str(self.resource_id))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyResource/Resources/containerimage.py:
  🚨 Line 80: direct_query (in_or_notin_)
     Code: DbObjects.Container.organization_service_id.in_(db.session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.organization_id == org_svc.organization_id))
     Arg:  db.session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.organization_id == org_svc.organization_id)

  🚨 Line 85: direct_query (in_or_notin_)
     Code: DbObjects.Container.resource_id.notin_(db.session.query(DbObjects.ResourceCommonData.resource_id).filter(DbObjects.ResourceCommonData.pending_delete.is_(True)))
     Arg:  db.session.query(DbObjects.ResourceCommonData.resource_id).filter(DbObjects.ResourceCommonData.pending_delete.is_(True))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyResource/Resources/serviceencryptionkey.py:
  🟡 Line 130: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.ETL_DATA_CATALOG
     Arg:  ResourceType.ETL_DATA_CATALOG

  🚨 Line 139: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(db.session.query(DbObjects.ResourceLink.left_resource_id).filter(DbObjects.ResourceLink.right_resource_id == self.resource_id))
     Arg:  db.session.query(DbObjects.ResourceLink.left_resource_id).filter(DbObjects.ResourceLink.right_resource_id == self.resource_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyResource/Resources/loadbalancer.py:
  🚨 Line 175: direct_query (in_or_notin_)
     Code: ResourceVulnerability.resource_id.in_(self._get_db().session.query(DbObjects.ResourceLink.right_resource_id).filter(DbObjects.ResourceLink.left_resource_id == str(self.resource_id)))
     Arg:  self._get_db().session.query(DbObjects.ResourceLink.right_resource_id).filter(DbObjects.ResourceLink.left_resource_id == str(self.resource_id))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyResource/Resources/servicemanagedpolicy.py:
  🚨 Line 88: direct_query (in_or_notin_)
     Code: DbObjects.ResourceCommonData.organization_service_id.in_(db.session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.organization_id == organization_id))
     Arg:  db.session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.organization_id == organization_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyResource/Resources/divvybot.py:
  🚨 Line 1808: direct_query (in_or_notin_)
     Code: DbObjects.DivvyBot.resource_id.in_(db.session.query(DbObjects.Badge.target_resource_id).filter(func.lower(DbObjects.Badge.key) == badge.key.lower()).filter(func.lower(DbObjects.Badge.value) == badge.value.lower()))
     Arg:  db.session.query(DbObjects.Badge.target_resource_id).filter(func.lower(DbObjects.Badge.key) == badge.key.lower()).filter(func.lower(DbObjects.Badge.value) == badge.value.lower())

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyResource/Resources/autoscalinggroup.py:
  🚨 Line 172: direct_query (in_or_notin_)
     Code: ResourceVulnerability.resource_id.in_(self._get_db().session.query(DbObjects.ResourceLink.right_resource_id).filter(DbObjects.ResourceLink.left_resource_id == str(self.resource_id)))
     Arg:  self._get_db().session.query(DbObjects.ResourceLink.right_resource_id).filter(DbObjects.ResourceLink.left_resource_id == str(self.resource_id))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyResource/Resources/networkaddressgroup.py:
  🚨 Line 61: direct_query (in_or_notin_)
     Code: DbObjects.ResourceAccessList.resource_id.in_(db.session.query(DbObjects.ResourceAccessListRule.parent_resource_id).filter(or_(DbObjects.ResourceAccessListRule.source_network == self.resource_id.group_id, DbObjects.ResourceAccessListRule.destination_network == self.resource_id.group_id)))
     Arg:  db.session.query(DbObjects.ResourceAccessListRule.parent_resource_id).filter(or_(DbObjects.ResourceAccessListRule.source_network == self.resource_id.group_id, DbObjects.ResourceAccessListRule.destination_network == self.resource_id.group_id))

  🚨 Line 81: direct_query (in_or_notin_)
     Code: DbObjects.RouteTable.resource_id.in_(db.session.query(DbObjects.RouteTableRoute.route_table_resource_id).filter(DbObjects.RouteTableRoute.cidr == self.resource_id.group_id))
     Arg:  db.session.query(DbObjects.RouteTableRoute.route_table_resource_id).filter(DbObjects.RouteTableRoute.cidr == self.resource_id.group_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyResource/Resources/resourcegroup_organizationservice.py:
  🚨 Line 186: direct_query (in_or_notin_)
     Code: OrganizationServiceAccount.account_id.notin_(db.session.query(OrganizationService.account_id).filter(OrganizationService.account_id.isnot(None)))
     Arg:  db.session.query(OrganizationService.account_id).filter(OrganizationService.account_id.isnot(None))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyResource/Resources/resourcegroup_all.py:
  ⚠️  Line 188: query_variable (in_or_notin_)
     Code: cls.get_db_class().organization_service_id.in_(subq)
     Arg:  subq

  ⚠️  Line 212: query_variable (in_or_notin_)
     Code: DbObjects.SubjectPermission.subject_resource_id.in_(group_subq)
     Arg:  group_subq

  ⚠️  Line 240: query_variable (in_or_notin_)
     Code: DbObjects.SubjectPermission.subject_resource_id.in_(group_subq)
     Arg:  group_subq

  ⚠️  Line 250: query_variable (in_or_notin_)
     Code: cls.get_db_class().organization_service_id.in_(orgsvc_subq)
     Arg:  orgsvc_subq

  ⚠️  Line 251: query_variable (in_or_notin_)
     Code: cls.get_db_class().resource_id.in_(owner_subq)
     Arg:  owner_subq

  ⚠️  Line 252: query_variable (in_or_notin_)
     Code: cls.get_db_class().resource_id.in_(resource_subq)
     Arg:  resource_subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/bulk.py:
  🟡 Line 85: possible_row_attribute (>=)
     Code: len(self._buffer) >= self.max_records
     Arg:  self.max_records

  🟡 Line 176: possible_row_attribute (>=)
     Code: len(self.new_records) >= self.max_records
     Arg:  self.max_records

  🟡 Line 181: possible_row_attribute (>=)
     Code: len(self.modified_records) >= self.max_records
     Arg:  self.max_records

  🟡 Line 191: possible_row_attribute (>=)
     Code: len(self.deleted_records_by_id) >= self.max_records
     Arg:  self.max_records

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/DivvyCloudGatewayORM.py:
  🟡 Line 214: possible_row_attribute (==)
     Code: DbObjects.DnsZoneRecord.zone_id == base_record.zone_id
     Arg:  base_record.zone_id

  🟡 Line 215: possible_row_attribute (==)
     Code: DbObjects.DnsZoneRecord.record_type == base_record.record_type
     Arg:  base_record.record_type

  🟡 Line 229: possible_row_attribute (==)
     Code: DbObjects.DnsZoneRecord.zone_id == data_record.zone_id
     Arg:  data_record.zone_id

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/DbObjects/insights/__init__.py:
  🚨 Line 2021: direct_query (in_or_notin_)
     Code: ScheduledEvent.creation_resource_id.in_(db.session.query(Bot.resource_id).filter(Bot.insight_id == insight_id).filter(Bot.source == source))
     Arg:  db.session.query(Bot.resource_id).filter(Bot.insight_id == insight_id).filter(Bot.source == source)

  🟡 Line 2352: possible_row_variable (!=)
     Code: len(backoffice_ids) != result
     Arg:  result

  🟡 Line 2357: possible_row_variable (!=)
     Code: len(custom_ids) != result
     Arg:  result

  ⚠️  Line 4072: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(org_svc_subq)
     Arg:  org_svc_subq

  ⚠️  Line 4103: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(org_svc_subq)
     Arg:  org_svc_subq

  ⚠️  Line 4158: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(org_svc_subq)
     Arg:  org_svc_subq

  🚨 Line 4200: direct_query (in_or_notin_)
     Code: resource_cls.organization_service_id.in_(session.query(OrganizationService.organization_service_id).filter(OrganizationService.organization_id == user.organization_id))
     Arg:  session.query(OrganizationService.organization_service_id).filter(OrganizationService.organization_id == user.organization_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/DbObjects/resources/volume.py:
  🟡 Line 323: possible_row_attribute (==)
     Code: self.availability_zone == other.availability_zone
     Arg:  other.availability_zone

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/comparison/comparators/json_compare.py:
  🟡 Line 34: possible_row_variable (==)
     Code: lhs_data == rhs_data
     Arg:  rhs_data

  🟡 Line 38: possible_row_variable (==)
     Code: lhs_data == rhs_data
     Arg:  rhs_data

  🟡 Line 42: possible_row_variable (==)
     Code: str(lhs_data) == rhs_data
     Arg:  rhs_data

  🟡 Line 90: possible_row_variable (==)
     Code: lhs_data == rhs_data
     Arg:  rhs_data

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/service_encryption_key.py:
  🚨 Line 312: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(rt_db_cls.key_resource_id))
     Arg:  session.query(rt_db_cls.key_resource_id)

  🟡 Line 437: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.ETL_DATA_CATALOG
     Arg:  ResourceType.ETL_DATA_CATALOG

  🟡 Line 579: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.ETL_DATA_CATALOG
     Arg:  ResourceType.ETL_DATA_CATALOG

  🟡 Line 581: possible_row_attribute (==)
     Code: b.resource_id == db_cls.metadata_key_resource_id
     Arg:  db_cls.metadata_key_resource_id

  🟡 Line 667: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.DATA_ANALYTICS_WORKSPACE
     Arg:  ResourceType.DATA_ANALYTICS_WORKSPACE

  🟡 Line 788: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.ETL_DATA_CATALOG
     Arg:  ResourceType.ETL_DATA_CATALOG

  🟡 Line 790: possible_row_attribute (==)
     Code: b.resource_id == db_cls.metadata_key_resource_id
     Arg:  db_cls.metadata_key_resource_id

  ⚠️  Line 893: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🟡 Line 1246: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.ETL_DATA_CATALOG
     Arg:  ResourceType.ETL_DATA_CATALOG

  🟡 Line 1316: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.ETL_DATA_CATALOG
     Arg:  ResourceType.ETL_DATA_CATALOG

  🟡 Line 1600: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.ETL_DATA_CATALOG
     Arg:  ResourceType.ETL_DATA_CATALOG

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/storage_account.py:
  ⚠️  Line 181: query_variable (in_or_notin_)
     Code: db_cls.storage_account_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 219: query_variable (in_or_notin_)
     Code: db_cls.storage_account_resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/data_analytics_workspace.py:
  🚨 Line 32: direct_query (in_or_notin_)
     Code: func.SUBSTRING_INDEX(func.SUBSTRING_INDEX(db_cls.output_location, '/', 3), '/', -1).in_(session.query(dbo.StorageContainer.name).filter(dbo.StorageContainer.public.is_(True)))
     Arg:  session.query(dbo.StorageContainer.name).filter(dbo.StorageContainer.public.is_(True))

  🚨 Line 59: direct_query (in_or_notin_)
     Code: func.SUBSTRING_INDEX(func.SUBSTRING_INDEX(db_cls.output_location, '/', 3), '/', -1).in_(session.query(dbo.StorageContainer.name).filter(and_(dbo.StorageContainer.global_encryption.is_(None), dbo.StorageContainer.policy_encryption.is_(False))))
     Arg:  session.query(dbo.StorageContainer.name).filter(and_(dbo.StorageContainer.global_encryption.is_(None), dbo.StorageContainer.policy_encryption.is_(False)))

  🚨 Line 92: direct_query (in_or_notin_)
     Code: func.SUBSTRING_INDEX(func.SUBSTRING_INDEX(db_cls.output_location, '/', 3), '/', -1).notin_(session.query(dbo.StorageContainer.name))
     Arg:  session.query(dbo.StorageContainer.name)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/cognitive_search.py:
  ⚠️  Line 152: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/instance.py:
  🚨 Line 153: direct_query (in_or_notin_)
     Code: db_cls.instance_id.in_(session.query(InstanceStatus.instance_id).filter(or_(InstanceStatus.system_reachability == 'failed', InstanceStatus.instance_reachability == 'failed')))
     Arg:  session.query(InstanceStatus.instance_id).filter(or_(InstanceStatus.system_reachability == 'failed', InstanceStatus.instance_reachability == 'failed'))

  ⚠️  Line 214: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 252: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 309: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 346: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 408: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 460: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🚨 Line 580: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(OrganizationService.organization_service_id))
     Arg:  session.query(OrganizationService.organization_service_id)

  ⚠️  Line 780: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(instance_subq)
     Arg:  instance_subq

  🚨 Line 781: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(interface_subq)))
     Arg:  session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(interface_subq))

  ⚠️  Line 783: query_variable (in_or_notin_)
     Code: NetworkInterface.resource_id.in_(interface_subq)
     Arg:  interface_subq

  🚨 Line 995: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(list(interface_resource_ids))))
     Arg:  session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(list(interface_resource_ids)))

  🚨 Line 1110: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(list(interface_resource_ids))))
     Arg:  session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(list(interface_resource_ids)))

  ⚠️  Line 1164: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(instance_subq)
     Arg:  instance_subq

  🚨 Line 1165: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(interface_subq)))
     Arg:  session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(interface_subq))

  ⚠️  Line 1167: query_variable (in_or_notin_)
     Code: NetworkInterface.resource_id.in_(interface_subq)
     Arg:  interface_subq

  ⚠️  Line 1337: query_variable (in_or_notin_)
     Code: db_cls.image_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 1339: query_variable (in_or_notin_)
     Code: db_cls.image_id.in_(subq)
     Arg:  subq

  🚨 Line 1582: direct_query (in_or_notin_)
     Code: db_cls.image_id.in_(session.query(PrivateImage.image_id).join(ResourceCommonData, PrivateImage.resource_id == ResourceCommonData.resource_id).filter(or_(private_image_creation_eval, and_(PrivateImage.creation_date.is_(None), resource_common_discovered_eval))))
     Arg:  session.query(PrivateImage.image_id).join(ResourceCommonData, PrivateImage.resource_id == ResourceCommonData.resource_id).filter(or_(private_image_creation_eval, and_(PrivateImage.creation_date.is_(None), resource_common_discovered_eval)))

  🚨 Line 1648: direct_query (in_or_notin_)
     Code: db_cls.image_id.notin_(session.query(PrivateImage.image_id))
     Arg:  session.query(PrivateImage.image_id)

  🚨 Line 1649: direct_query (in_or_notin_)
     Code: db_cls.image_id.notin_(session.query(SharedImage.image_id))
     Arg:  session.query(SharedImage.image_id)

  🚨 Line 1691: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq))

  ⚠️  Line 1692: query_variable (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1718: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('autoscaling%')).filter(ResourceLink.right_resource_id.like('instance%')))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('autoscaling%')).filter(ResourceLink.right_resource_id.like('instance%'))

  🚨 Line 1761: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(session.query(AutoscalingGroup.resource_id).filter(AutoscalingGroup.name.in_(autoscaling_groups)))))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(session.query(AutoscalingGroup.resource_id).filter(AutoscalingGroup.name.in_(autoscaling_groups))))

  🚨 Line 1763: direct_query (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(session.query(AutoscalingGroup.resource_id).filter(AutoscalingGroup.name.in_(autoscaling_groups)))
     Arg:  session.query(AutoscalingGroup.resource_id).filter(AutoscalingGroup.name.in_(autoscaling_groups))

  🚨 Line 2132: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id.in_(clouds_with_multi_az_inheritance)))
     Arg:  session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id.in_(clouds_with_multi_az_inheritance))

  🚨 Line 2180: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id.in_(clouds_with_multi_az_inheritance)))
     Arg:  session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id.in_(clouds_with_multi_az_inheritance))

  🚨 Line 2411: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceMetric.target_resource_id).filter(ResourceMetric.metric_id == 'divvy.last_database_connection.count').filter(ResourceMetric.creation_timestamp < threshold).group_by(ResourceMetric.target_resource_id))
     Arg:  session.query(ResourceMetric.target_resource_id).filter(ResourceMetric.metric_id == 'divvy.last_database_connection.count').filter(ResourceMetric.creation_timestamp < threshold).group_by(ResourceMetric.target_resource_id)

  🟡 Line 2671: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.DATABASE_INSTANCE
     Arg:  ResourceType.DATABASE_INSTANCE

  ⚠️  Line 2748: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 2786: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 2808: query_variable (in_or_notin_)
     Code: DatabaseInstance.database_cluster_resource_id.in_(cluster_subq)
     Arg:  cluster_subq

  🟡 Line 2828: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.DATABASE_INSTANCE
     Arg:  ResourceType.DATABASE_INSTANCE

  ⚠️  Line 2829: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(instance_subq)
     Arg:  instance_subq

  🟡 Line 2830: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.DATABASE_CLUSTER
     Arg:  ResourceType.DATABASE_CLUSTER

  ⚠️  Line 2831: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(cluster_subq)
     Arg:  cluster_subq

  ⚠️  Line 2833: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(big_data_subq)
     Arg:  big_data_subq

  🚨 Line 3118: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(ResourceAccessList.resource_id).filter(or_(ResourceAccessList.access_list_id.in_(settings_config['association_list']), ResourceAccessList.name.in_(settings_config['association_list']))))
     Arg:  session.query(ResourceAccessList.resource_id).filter(or_(ResourceAccessList.access_list_id.in_(settings_config['association_list']), ResourceAccessList.name.in_(settings_config['association_list'])))

  🚨 Line 3196: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(ResourceAccessList.resource_id).filter(ResourceAccessList.name.op('regexp')('%s' % expression)))
     Arg:  session.query(ResourceAccessList.resource_id).filter(ResourceAccessList.name.op('regexp')('%s' % expression))

  ⚠️  Line 3204: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 3209: query_variable (in_or_notin_)
     Code: NetworkInterface.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 3220: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 3221: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(subq)).filter(NetworkInterface.instance_resource_id.isnot(None)))
     Arg:  session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(subq)).filter(NetworkInterface.instance_resource_id.isnot(None))

  ⚠️  Line 3223: query_variable (in_or_notin_)
     Code: NetworkInterface.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 3274: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(ResourceAccessList.resource_id).filter(and_(ResourceAccessList.access_list_id.notin_(settings_config['whitelist']), ResourceAccessList.name.notin_(settings_config['whitelist']))))
     Arg:  session.query(ResourceAccessList.resource_id).filter(and_(ResourceAccessList.access_list_id.notin_(settings_config['whitelist']), ResourceAccessList.name.notin_(settings_config['whitelist'])))

  ⚠️  Line 3286: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 3287: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(subq)))
     Arg:  session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(subq))

  ⚠️  Line 3288: query_variable (in_or_notin_)
     Code: NetworkInterface.resource_id.in_(subq)
     Arg:  subq

  🟡 Line 3337: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.DATABASE_MIGRATION_INSTANCE
     Arg:  ResourceType.DATABASE_MIGRATION_INSTANCE

  ⚠️  Line 3363: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 3419: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 3835: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(Volume.instance_resource_id).filter(Volume.instance_resource_id.isnot(None)).filter(Volume.resource_id.in_(session.query(Snapshot.volume_resource_id).filter(Snapshot.create_time > threshold))))
     Arg:  session.query(Volume.instance_resource_id).filter(Volume.instance_resource_id.isnot(None)).filter(Volume.resource_id.in_(session.query(Snapshot.volume_resource_id).filter(Snapshot.create_time > threshold)))

  🚨 Line 3839: direct_query (in_or_notin_)
     Code: Volume.resource_id.in_(session.query(Snapshot.volume_resource_id).filter(Snapshot.create_time > threshold))
     Arg:  session.query(Snapshot.volume_resource_id).filter(Snapshot.create_time > threshold)

  🚨 Line 3884: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(Volume.instance_resource_id).filter(Volume.instance_resource_id.isnot(None)).filter(Volume.resource_id.in_(session.query(Snapshot.volume_resource_id).filter(Snapshot.create_time > threshold))))
     Arg:  session.query(Volume.instance_resource_id).filter(Volume.instance_resource_id.isnot(None)).filter(Volume.resource_id.in_(session.query(Snapshot.volume_resource_id).filter(Snapshot.create_time > threshold)))

  🚨 Line 3888: direct_query (in_or_notin_)
     Code: Volume.resource_id.in_(session.query(Snapshot.volume_resource_id).filter(Snapshot.create_time > threshold))
     Arg:  session.query(Snapshot.volume_resource_id).filter(Snapshot.create_time > threshold)

  🚨 Line 4239: direct_query (in_or_notin_)
     Code: NetworkInterface.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id.like('networkinterface%'), ResourceLink.right_resource_id.in_(sg_resource_ids)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id.like('networkinterface%'), ResourceLink.right_resource_id.in_(sg_resource_ids))

  🚨 Line 4274: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(Volume.instance_resource_id).filter(Volume.encrypted.is_(False)))
     Arg:  session.query(Volume.instance_resource_id).filter(Volume.encrypted.is_(False))

  ⚠️  Line 4400: query_variable (in_or_notin_)
     Code: db_cls.role_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 4479: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 4481: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 4599: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 4663: direct_query (in_or_notin_)
     Code: NetworkInterface.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(list(parent_resource_ids))))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(list(parent_resource_ids)))

  🚨 Line 4694: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.vm_extensions).filter(or_(func.json_contains(ResourceProperty.value, '{"provisioning_state": "Succeeded", "name": "MicrosoftMonitoringAgent"}'), func.json_contains(ResourceProperty.value, '{"provisioning_state": "Succeeded", "name": "OmsAgentForLinux"}'))))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.vm_extensions).filter(or_(func.json_contains(ResourceProperty.value, '{"provisioning_state": "Succeeded", "name": "MicrosoftMonitoringAgent"}'), func.json_contains(ResourceProperty.value, '{"provisioning_state": "Succeeded", "name": "OmsAgentForLinux"}')))

  🚨 Line 4727: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.vm_extensions).filter(not_(func.json_contains(ResourceProperty.value, '{"provisioning_state": "Succeeded", "name": "MicrosoftMonitoringAgent"}')), not_(func.json_contains(ResourceProperty.value, '{"provisioning_state": "Succeeded", "name": "OmsAgentForLinux"}'))))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.vm_extensions).filter(not_(func.json_contains(ResourceProperty.value, '{"provisioning_state": "Succeeded", "name": "MicrosoftMonitoringAgent"}')), not_(func.json_contains(ResourceProperty.value, '{"provisioning_state": "Succeeded", "name": "OmsAgentForLinux"}')))

  🚨 Line 4769: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(Volume.instance_resource_id).filter(Volume.encrypted.is_(False), Volume.device.in_(['/dev/sda', '/dev/sda1', '/dev/xvda', '/dev/vda', 'sda', 'sda1', 'xvda', 'vda', 'boot'])))
     Arg:  session.query(Volume.instance_resource_id).filter(Volume.encrypted.is_(False), Volume.device.in_(['/dev/sda', '/dev/sda1', '/dev/xvda', '/dev/vda', 'sda', 'sda1', 'xvda', 'vda', 'boot']))

  🚨 Line 4802: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(Volume.instance_resource_id).filter(Volume.encrypted.is_(False), Volume.device.notin_(['/dev/sda', '/dev/sda1', '/dev/xvda', '/dev/vda', 'sda', 'sda1', 'xvda', 'vda', 'boot'])))
     Arg:  session.query(Volume.instance_resource_id).filter(Volume.encrypted.is_(False), Volume.device.notin_(['/dev/sda', '/dev/sda1', '/dev/xvda', '/dev/vda', 'sda', 'sda1', 'xvda', 'vda', 'boot']))

  ⚠️  Line 4940: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 5027: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.threat_detection).filter(func.json_contains(ResourceProperty.value, '{"enabled": true}')))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.threat_detection).filter(func.json_contains(ResourceProperty.value, '{"enabled": true}'))

  🚨 Line 5054: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.auditing).filter(func.json_contains(ResourceProperty.value, '{"enabled": true}')))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.auditing).filter(func.json_contains(ResourceProperty.value, '{"enabled": true}'))

  🚨 Line 5082: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.auditing).filter(func.json_contains(ResourceProperty.value, '{"enabled": false}')))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.auditing).filter(func.json_contains(ResourceProperty.value, '{"enabled": false}'))

  ⚠️  Line 5136: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 5185: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 5234: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 5283: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 5329: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 5390: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 5451: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 5486: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.threat_detection).filter(func.json_contains(ResourceProperty.value, '{"enabled": false}')))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.threat_detection).filter(func.json_contains(ResourceProperty.value, '{"enabled": false}'))

  🚨 Line 5635: direct_query (in_or_notin_)
     Code: NetworkInterface.subnet_resource_id.in_(session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.resource_id.in_(subnets)))
     Arg:  session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.resource_id.in_(subnets))

  🚨 Line 5638: direct_query (in_or_notin_)
     Code: NetworkInterface.network_resource_id.in_(session.query(RouteTable.network_resource_id).filter(RouteTable.vpc_association_id.isnot(None), RouteTable.resource_id.in_(matched_route_tables)))
     Arg:  session.query(RouteTable.network_resource_id).filter(RouteTable.vpc_association_id.isnot(None), RouteTable.resource_id.in_(matched_route_tables))

  🚨 Line 5698: direct_query (in_or_notin_)
     Code: db_cls.image_id.in_(session.query(SharedImage.image_id).filter(SharedImage.owner_id.notin_(known_account_ids)).filter(SharedImage.image_id.notin_(whitelist)))
     Arg:  session.query(SharedImage.image_id).filter(SharedImage.owner_id.notin_(known_account_ids)).filter(SharedImage.image_id.notin_(whitelist))

  ⚠️  Line 5985: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 6040: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 6294: direct_query (in_or_notin_)
     Code: SharedImage.owner_id.notin_(session.query(OrganizationServiceAccount.account_id))
     Arg:  session.query(OrganizationServiceAccount.account_id)

  🚨 Line 6295: direct_query (in_or_notin_)
     Code: SharedImage.owner_id.notin_(session.query(OrganizationService.account_id).filter(OrganizationService.account_id != 'NULL'))
     Arg:  session.query(OrganizationService.account_id).filter(OrganizationService.account_id != 'NULL')

  ⚠️  Line 6300: query_variable (in_or_notin_)
     Code: db_cls.image_id.in_(subq)
     Arg:  subq

  ⚠️  Line 6404: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq_set)
     Arg:  subq_set

  🚨 Line 6461: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name.in_(unmanaged_disk_types)))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name.in_(unmanaged_disk_types))

  ⚠️  Line 6502: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(source_network_subq)
     Arg:  source_network_subq

  ⚠️  Line 6502: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(explicit_subq)
     Arg:  explicit_subq

  🚨 Line 6845: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.database_configuration).filter(func.json_contains(ResourceProperty.value, '{"log_checkpoints": "%s"}' % settings_config['setting_value'])))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.database_configuration).filter(func.json_contains(ResourceProperty.value, '{"log_checkpoints": "%s"}' % settings_config['setting_value']))

  🟡 Line 6847: possible_row_attribute (==)
     Code: ResourceProperty.name == CorePropertyNames.database_configuration
     Arg:  CorePropertyNames.database_configuration

  🚨 Line 6881: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.database_configuration).filter(func.json_contains(ResourceProperty.value, '{"log_connections": "%s"}' % settings_config['setting_value'])))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.database_configuration).filter(func.json_contains(ResourceProperty.value, '{"log_connections": "%s"}' % settings_config['setting_value']))

  🟡 Line 6883: possible_row_attribute (==)
     Code: ResourceProperty.name == CorePropertyNames.database_configuration
     Arg:  CorePropertyNames.database_configuration

  🚨 Line 6917: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.database_configuration).filter(func.json_contains(ResourceProperty.value, '{"log_disconnections": "%s"}' % settings_config['setting_value'])))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.database_configuration).filter(func.json_contains(ResourceProperty.value, '{"log_disconnections": "%s"}' % settings_config['setting_value']))

  🟡 Line 6919: possible_row_attribute (==)
     Code: ResourceProperty.name == CorePropertyNames.database_configuration
     Arg:  CorePropertyNames.database_configuration

  🚨 Line 6953: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.database_configuration).filter(func.json_contains(ResourceProperty.value, '{"log_duration": "%s"}' % settings_config['setting_value'])))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.database_configuration).filter(func.json_contains(ResourceProperty.value, '{"log_duration": "%s"}' % settings_config['setting_value']))

  🟡 Line 6955: possible_row_attribute (==)
     Code: ResourceProperty.name == CorePropertyNames.database_configuration
     Arg:  CorePropertyNames.database_configuration

  🚨 Line 6987: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.database_configuration).filter(func.json_contains(ResourceProperty.value, '{"connection_throttling": "%s"}' % settings_config['setting_value'])))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.database_configuration).filter(func.json_contains(ResourceProperty.value, '{"connection_throttling": "%s"}' % settings_config['setting_value']))

  🟡 Line 6989: possible_row_attribute (==)
     Code: ResourceProperty.name == CorePropertyNames.database_configuration
     Arg:  CorePropertyNames.database_configuration

  🚨 Line 7027: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.database_configuration).filter(func.json_extract(ResourceProperty.value, '$.log_retention_days') < settings_config['days']))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.database_configuration).filter(func.json_extract(ResourceProperty.value, '$.log_retention_days') < settings_config['days'])

  🟡 Line 7029: possible_row_attribute (==)
     Code: ResourceProperty.name == CorePropertyNames.database_configuration
     Arg:  CorePropertyNames.database_configuration

  🚨 Line 7089: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.like('CryptoCurrency%')))))
     Arg:  session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.like('CryptoCurrency%'))))

  🚨 Line 7091: direct_query (in_or_notin_)
     Code: ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.like('CryptoCurrency%')))
     Arg:  session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.like('CryptoCurrency%'))

  🚨 Line 7120: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.like('%:EC2/%')))))
     Arg:  session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.like('%:EC2/%'))))

  🚨 Line 7122: direct_query (in_or_notin_)
     Code: ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.like('%:EC2/%')))
     Arg:  session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.like('%:EC2/%'))

  ⚠️  Line 7189: query_variable (in_or_notin_)
     Code: db_cls.instance_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 7191: query_variable (in_or_notin_)
     Code: db_cls.instance_id.in_(subq)
     Arg:  subq

  ⚠️  Line 7254: query_variable (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(webapp_subq)
     Arg:  webapp_subq

  🚨 Line 7255: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(AutoscalingGroup.resource_id))
     Arg:  session.query(AutoscalingGroup.resource_id)

  🚨 Line 7259: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.right_resource_id).filter(or_(ResourceLink.left_resource_id.in_(webapp_subq), ResourceLink.left_resource_id.in_(asg_link_subq))))
     Arg:  session.query(ResourceLink.right_resource_id).filter(or_(ResourceLink.left_resource_id.in_(webapp_subq), ResourceLink.left_resource_id.in_(asg_link_subq)))

  ⚠️  Line 7261: query_variable (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(webapp_subq)
     Arg:  webapp_subq

  ⚠️  Line 7261: query_variable (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(asg_link_subq)
     Arg:  asg_link_subq

  🚨 Line 7464: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.instance_resource_id.isnot(None)).filter(NetworkInterface.resource_id.in_(list(interface_resource_ids))))
     Arg:  session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.instance_resource_id.isnot(None)).filter(NetworkInterface.resource_id.in_(list(interface_resource_ids)))

  🚨 Line 7476: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.instance_resource_id.isnot(None)).filter(NetworkInterface.resource_id.in_(list(interface_resource_ids))))
     Arg:  session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.instance_resource_id.isnot(None)).filter(NetworkInterface.resource_id.in_(list(interface_resource_ids)))

  🚨 Line 7502: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceSubnetAccess.resource_id).filter(or_(db_cls.resource_id.notin_(session.query(ResourceSubnetAccess.resource_id).distinct(ResourceSubnetAccess.resource_id)), ResourceSubnetAccess.subnet_resource_id.notin_(session.query(ResourceLink.right_resource_id).filter(and_(ResourceLink.right_resource_id.like('privatesubnet%'), ResourceLink.left_resource_id.in_(session.query(NetworkEndpoint.resource_id).filter(and_(NetworkEndpoint.service_name == 'Microsoft.Sql', NetworkEndpoint.endpoint_type == 'gateway')))))))))
     Arg:  session.query(ResourceSubnetAccess.resource_id).filter(or_(db_cls.resource_id.notin_(session.query(ResourceSubnetAccess.resource_id).distinct(ResourceSubnetAccess.resource_id)), ResourceSubnetAccess.subnet_resource_id.notin_(session.query(ResourceLink.right_resource_id).filter(and_(ResourceLink.right_resource_id.like('privatesubnet%'), ResourceLink.left_resource_id.in_(session.query(NetworkEndpoint.resource_id).filter(and_(NetworkEndpoint.service_name == 'Microsoft.Sql', NetworkEndpoint.endpoint_type == 'gateway'))))))))

  🚨 Line 7510: direct_query (in_or_notin_)
     Code: ResourceSubnetAccess.subnet_resource_id.notin_(session.query(ResourceLink.right_resource_id).filter(and_(ResourceLink.right_resource_id.like('privatesubnet%'), ResourceLink.left_resource_id.in_(session.query(NetworkEndpoint.resource_id).filter(and_(NetworkEndpoint.service_name == 'Microsoft.Sql', NetworkEndpoint.endpoint_type == 'gateway'))))))
     Arg:  session.query(ResourceLink.right_resource_id).filter(and_(ResourceLink.right_resource_id.like('privatesubnet%'), ResourceLink.left_resource_id.in_(session.query(NetworkEndpoint.resource_id).filter(and_(NetworkEndpoint.service_name == 'Microsoft.Sql', NetworkEndpoint.endpoint_type == 'gateway')))))

  🚨 Line 7515: direct_query (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(session.query(NetworkEndpoint.resource_id).filter(and_(NetworkEndpoint.service_name == 'Microsoft.Sql', NetworkEndpoint.endpoint_type == 'gateway')))
     Arg:  session.query(NetworkEndpoint.resource_id).filter(and_(NetworkEndpoint.service_name == 'Microsoft.Sql', NetworkEndpoint.endpoint_type == 'gateway'))

  ⚠️  Line 7590: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 8420: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.advanced_data_security).filter(filter_arg))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.advanced_data_security).filter(filter_arg)

  🟡 Line 8422: possible_row_attribute (==)
     Code: ResourceProperty.name == CorePropertyNames.advanced_data_security
     Arg:  CorePropertyNames.advanced_data_security

  🚨 Line 8446: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.advanced_data_security).filter(ResourceProperty.resource_id.like('dbinstance:%')).filter(func.json_extract(ResourceProperty.value, '$.storage_container_path').isnot(None)))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.advanced_data_security).filter(ResourceProperty.resource_id.like('dbinstance:%')).filter(func.json_extract(ResourceProperty.value, '$.storage_container_path').isnot(None))

  🟡 Line 8448: possible_row_attribute (==)
     Code: ResourceProperty.name == CorePropertyNames.advanced_data_security
     Arg:  CorePropertyNames.advanced_data_security

  🚨 Line 8472: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.advanced_data_security).filter(ResourceProperty.resource_id.like('dbinstance:%')).filter(func.json_contains(ResourceProperty.value, '{"is_enabled": true}', '$.recurring_scans')))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.advanced_data_security).filter(ResourceProperty.resource_id.like('dbinstance:%')).filter(func.json_contains(ResourceProperty.value, '{"is_enabled": true}', '$.recurring_scans'))

  🟡 Line 8474: possible_row_attribute (==)
     Code: ResourceProperty.name == CorePropertyNames.advanced_data_security
     Arg:  CorePropertyNames.advanced_data_security

  🚨 Line 8502: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.advanced_data_security).filter(ResourceProperty.resource_id.like('dbinstance:%')).filter(func.json_contains(ResourceProperty.value, '{"email_subscription_admins": true}', '$.recurring_scans')))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.advanced_data_security).filter(ResourceProperty.resource_id.like('dbinstance:%')).filter(func.json_contains(ResourceProperty.value, '{"email_subscription_admins": true}', '$.recurring_scans'))

  🟡 Line 8504: possible_row_attribute (==)
     Code: ResourceProperty.name == CorePropertyNames.advanced_data_security
     Arg:  CorePropertyNames.advanced_data_security

  🚨 Line 8532: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.advanced_data_security).filter(ResourceProperty.resource_id.like('dbinstance:%')).filter(or_(func.json_extract(ResourceProperty.value, '$.recurring_scans.emails').is_(None), func.json_length(ResourceProperty.value, '$.recurring_scans.emails') == 0)))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.advanced_data_security).filter(ResourceProperty.resource_id.like('dbinstance:%')).filter(or_(func.json_extract(ResourceProperty.value, '$.recurring_scans.emails').is_(None), func.json_length(ResourceProperty.value, '$.recurring_scans.emails') == 0))

  🟡 Line 8534: possible_row_attribute (==)
     Code: ResourceProperty.name == CorePropertyNames.advanced_data_security
     Arg:  CorePropertyNames.advanced_data_security

  🟡 Line 8654: possible_row_attribute (==)
     Code: ResourceProperty.name == CorePropertyNames.metadata_no_token
     Arg:  CorePropertyNames.metadata_no_token

  🚨 Line 8841: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(list(interface_resource_ids))))
     Arg:  session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(list(interface_resource_ids)))

  ⚠️  Line 9129: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 9139: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(full_scopes_subq)
     Arg:  full_scopes_subq

  ⚠️  Line 9224: query_variable (in_or_notin_)
     Code: db_cls.instance_id.in_(subq)
     Arg:  subq

  ⚠️  Line 9248: query_variable (in_or_notin_)
     Code: db_cls.instance_id.in_(subq)
     Arg:  subq

  🚨 Line 9291: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(query.session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))
     Arg:  query.session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))

  ⚠️  Line 9292: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 9298: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(query.session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))
     Arg:  query.session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))

  ⚠️  Line 9299: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 9420: direct_query (in_or_notin_)
     Code: NetworkInterface.organization_service_id.in_(session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id.in_(['AZURE_ARM', 'AZURE_GOV', 'AZURE_CHINA'])))
     Arg:  session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id.in_(['AZURE_ARM', 'AZURE_GOV', 'AZURE_CHINA']))

  ⚠️  Line 9431: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 9433: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 9436: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 9438: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 9508: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(PathNode.resource_id.distinct()).join(PathComponent, PathNode.id == PathComponent.path_node_id).join(Path, PathComponent.path_id == Path.id).outerjoin(inactive_paths, PathComponent.path_id == inactive_paths.c.path_id).outerjoin(PathExemption, Path.id == PathExemption.path_id).filter(PathNode.node_type == 'instance', PathNode.organization_service_id == db_cls.organization_service_id, inactive_paths.c.path_id.is_(None), PathExemption.path_id.is_(None)))
     Arg:  session.query(PathNode.resource_id.distinct()).join(PathComponent, PathNode.id == PathComponent.path_node_id).join(Path, PathComponent.path_id == Path.id).outerjoin(inactive_paths, PathComponent.path_id == inactive_paths.c.path_id).outerjoin(PathExemption, Path.id == PathExemption.path_id).filter(PathNode.node_type == 'instance', PathNode.organization_service_id == db_cls.organization_service_id, inactive_paths.c.path_id.is_(None), PathExemption.path_id.is_(None))

  🚨 Line 9554: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(PathNode.resource_id.distinct()).join(PathComponent, PathNode.id == PathComponent.path_node_id).join(Path, PathComponent.path_id == Path.id).outerjoin(inactive_paths, PathComponent.path_id == inactive_paths.c.path_id).filter(PathNode.node_type == 'instance', PathNode.organization_service_id == db_cls.organization_service_id, inactive_paths.c.path_id.is_(None)))
     Arg:  session.query(PathNode.resource_id.distinct()).join(PathComponent, PathNode.id == PathComponent.path_node_id).join(Path, PathComponent.path_id == Path.id).outerjoin(inactive_paths, PathComponent.path_id == inactive_paths.c.path_id).filter(PathNode.node_type == 'instance', PathNode.organization_service_id == db_cls.organization_service_id, inactive_paths.c.path_id.is_(None))

  ⚠️  Line 9620: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/route_table.py:
  🚨 Line 41: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RouteTableRoute.route_table_resource_id).filter(RouteTableRoute.cidr == '0.0.0.0/0'))
     Arg:  session.query(RouteTableRoute.route_table_resource_id).filter(RouteTableRoute.cidr == '0.0.0.0/0')

  🚨 Line 69: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RouteTableRoute.route_table_resource_id).filter(or_(RouteTableRoute.target_id.like('igw-%'), RouteTableRoute.target_id == 'Internet')))
     Arg:  session.query(RouteTableRoute.route_table_resource_id).filter(or_(RouteTableRoute.target_id.like('igw-%'), RouteTableRoute.target_id == 'Internet'))

  🚨 Line 99: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(RouteTableRoute.route_table_resource_id).filter(or_(RouteTableRoute.target_id.like('igw-%'), RouteTableRoute.target_id == 'Internet')))
     Arg:  session.query(RouteTableRoute.route_table_resource_id).filter(or_(RouteTableRoute.target_id.like('igw-%'), RouteTableRoute.target_id == 'Internet'))

  🚨 Line 201: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.subnet_associations).filter(ResourceProperty.value.like('%%privatesubnet%')).filter(ResourceProperty.resource_id.like('routetable:%')))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.subnet_associations).filter(ResourceProperty.value.like('%%privatesubnet%')).filter(ResourceProperty.resource_id.like('routetable:%'))

  🚨 Line 231: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RouteTableRoute.route_table_resource_id).filter(RouteTableRoute.state == 'blackhole'))
     Arg:  session.query(RouteTableRoute.route_table_resource_id).filter(RouteTableRoute.state == 'blackhole')

  🚨 Line 408: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(RouteTableRoute.route_table_resource_id).filter(RouteTableRoute.target_type.in_(settings_config['destinations'])))
     Arg:  session.query(RouteTableRoute.route_table_resource_id).filter(RouteTableRoute.target_type.in_(settings_config['destinations']))

  ⚠️  Line 847: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/service_user.py:
  ⚠️  Line 87: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 137: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 281: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 328: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(recent_access_key_subq)
     Arg:  recent_access_key_subq

  ⚠️  Line 329: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(recent_login_subq)
     Arg:  recent_login_subq

  ⚠️  Line 586: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 642: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 740: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 792: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 792: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq2)
     Arg:  subq2

  🚨 Line 1099: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id.like(db_cls.resource_type + '%')).filter(ResourceLink.right_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id.like(db_cls.resource_type + '%')).filter(ResourceLink.right_resource_id.in_(subq))

  ⚠️  Line 1102: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1105: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id.like(db_cls.resource_type + '%')).filter(ResourceLink.right_resource_id.in_(managed_policy_subq)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id.like(db_cls.resource_type + '%')).filter(ResourceLink.right_resource_id.in_(managed_policy_subq))

  ⚠️  Line 1108: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(managed_policy_subq)
     Arg:  managed_policy_subq

  🚨 Line 1114: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id.like(db_cls.resource_type + '%')).filter(ResourceLink.right_resource_id.in_(managed_policy_subq)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id.like(db_cls.resource_type + '%')).filter(ResourceLink.right_resource_id.in_(managed_policy_subq))

  ⚠️  Line 1117: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(managed_policy_subq)
     Arg:  managed_policy_subq

  🚨 Line 1120: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id.like(db_cls.resource_type + '%')).filter(ResourceLink.right_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id.like(db_cls.resource_type + '%')).filter(ResourceLink.right_resource_id.in_(subq))

  ⚠️  Line 1123: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1176: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(managed_policy_subq)
     Arg:  managed_policy_subq

  ⚠️  Line 1181: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 1183: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1190: direct_query (in_or_notin_)
     Code: ServiceGroup.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id.like('servicegroup:%')).filter(ResourceLink.right_resource_id.in_(managed_policy_subq)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id.like('servicegroup:%')).filter(ResourceLink.right_resource_id.in_(managed_policy_subq))

  ⚠️  Line 1193: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(managed_policy_subq)
     Arg:  managed_policy_subq

  ⚠️  Line 1199: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 1199: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(group_subq)
     Arg:  group_subq

  ⚠️  Line 1201: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1201: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(group_subq)
     Arg:  group_subq

  ⚠️  Line 1204: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 1206: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1476: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ServiceAccessKey.user_resource_id).filter(ServiceAccessKey.resource_id.in_(session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.like('%:IAMUser/%')))))))
     Arg:  session.query(ServiceAccessKey.user_resource_id).filter(ServiceAccessKey.resource_id.in_(session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.like('%:IAMUser/%'))))))

  🚨 Line 1478: direct_query (in_or_notin_)
     Code: ServiceAccessKey.resource_id.in_(session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.like('%:IAMUser/%')))))
     Arg:  session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.like('%:IAMUser/%'))))

  🚨 Line 1480: direct_query (in_or_notin_)
     Code: ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.like('%:IAMUser/%')))
     Arg:  session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.like('%:IAMUser/%'))

  🚨 Line 1511: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ServiceAccessKey.user_resource_id).filter(ServiceAccessKey.resource_id.in_(session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.in_(['Stealth:IAMUser/CloudTrailLoggingDisabled', 'Stealth:IAMUser/LoggingConfigurationModified'])))))))
     Arg:  session.query(ServiceAccessKey.user_resource_id).filter(ServiceAccessKey.resource_id.in_(session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.in_(['Stealth:IAMUser/CloudTrailLoggingDisabled', 'Stealth:IAMUser/LoggingConfigurationModified']))))))

  🚨 Line 1513: direct_query (in_or_notin_)
     Code: ServiceAccessKey.resource_id.in_(session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.in_(['Stealth:IAMUser/CloudTrailLoggingDisabled', 'Stealth:IAMUser/LoggingConfigurationModified'])))))
     Arg:  session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.in_(['Stealth:IAMUser/CloudTrailLoggingDisabled', 'Stealth:IAMUser/LoggingConfigurationModified']))))

  🚨 Line 1515: direct_query (in_or_notin_)
     Code: ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.in_(['Stealth:IAMUser/CloudTrailLoggingDisabled', 'Stealth:IAMUser/LoggingConfigurationModified'])))
     Arg:  session.query(ThreatFinding.resource_id).filter(ThreatFinding.name.in_(['Stealth:IAMUser/CloudTrailLoggingDisabled', 'Stealth:IAMUser/LoggingConfigurationModified']))

  ⚠️  Line 1616: query_variable (in_or_notin_)
     Code: ServiceGroup.resource_id.in_(owner_subq)
     Arg:  owner_subq

  ⚠️  Line 1617: query_variable (in_or_notin_)
     Code: ServiceGroup.resource_id.in_(owner_subq2)
     Arg:  owner_subq2

  ⚠️  Line 1626: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(owner_subq)
     Arg:  owner_subq

  ⚠️  Line 1627: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(owner_subq2)
     Arg:  owner_subq2

  ⚠️  Line 1628: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(group_user_subq)
     Arg:  group_user_subq

  ⚠️  Line 1635: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(owner_subq)
     Arg:  owner_subq

  ⚠️  Line 1636: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(owner_subq2)
     Arg:  owner_subq2

  ⚠️  Line 1637: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(group_user_subq)
     Arg:  group_user_subq

  ⚠️  Line 1884: query_variable (in_or_notin_)
     Code: ServiceGroup.resource_id.in_(owner_subq)
     Arg:  owner_subq

  ⚠️  Line 1885: query_variable (in_or_notin_)
     Code: ServiceGroup.resource_id.in_(owner_subq2)
     Arg:  owner_subq2

  ⚠️  Line 1893: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(owner_subq)
     Arg:  owner_subq

  ⚠️  Line 1894: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(owner_subq2)
     Arg:  owner_subq2

  ⚠️  Line 1895: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(group_user_subq)
     Arg:  group_user_subq

  ⚠️  Line 1982: query_variable (in_or_notin_)
     Code: ServiceGroup.resource_id.in_(owner_subq)
     Arg:  owner_subq

  ⚠️  Line 1983: query_variable (in_or_notin_)
     Code: ServiceGroup.resource_id.in_(owner_subq2)
     Arg:  owner_subq2

  ⚠️  Line 1991: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(owner_subq)
     Arg:  owner_subq

  ⚠️  Line 1992: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(owner_subq2)
     Arg:  owner_subq2

  ⚠️  Line 1993: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(group_user_subq)
     Arg:  group_user_subq

  ⚠️  Line 2449: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq_not_approved_ip)
     Arg:  subq_not_approved_ip

  ⚠️  Line 2516: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/app_configuration.py:
  ⚠️  Line 209: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/identity_provider.py:
  🚨 Line 65: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(IdentityProvider.organization_service_id))
     Arg:  session.query(IdentityProvider.organization_service_id)

  🚨 Line 81: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(session.query(IdentityProvider.organization_service_id))
     Arg:  session.query(IdentityProvider.organization_service_id)

  ⚠️  Line 153: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 155: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(subq)
     Arg:  subq

  ⚠️  Line 210: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 212: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 263: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 265: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/cloud_credentials.py:
  🚨 Line 26: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(CloudCredentials.organization_service_id))
     Arg:  session.query(CloudCredentials.organization_service_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/textract.py:
  🟡 Line 97: possible_row_attribute (==)
     Code: SC.resource_id == db_cls.dataset_storage_container_resource_id
     Arg:  db_cls.dataset_storage_container_resource_id

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/conditional_access_policy.py:
  ⚠️  Line 70: query_variable (in_or_notin_)
     Code: db_cls.id.in_(policies_with_mfa_query)
     Arg:  policies_with_mfa_query

  ⚠️  Line 71: query_variable (in_or_notin_)
     Code: db_cls.id.notin_(policies_with_mfa_query)
     Arg:  policies_with_mfa_query

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/datastream.py:
  ⚠️  Line 481: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/mapreduce_cluster.py:
  🚨 Line 222: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(session.query(Instance.resource_id).filter(or_(Instance.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))), Instance.resource_id.in_(session.query(NetworkInterface.resource_id).filter(NetworkInterface.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))))))))))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(session.query(Instance.resource_id).filter(or_(Instance.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))), Instance.resource_id.in_(session.query(NetworkInterface.resource_id).filter(NetworkInterface.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))))))))

  🚨 Line 224: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(Instance.resource_id).filter(or_(Instance.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))), Instance.resource_id.in_(session.query(NetworkInterface.resource_id).filter(NetworkInterface.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))))))))
     Arg:  session.query(Instance.resource_id).filter(or_(Instance.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))), Instance.resource_id.in_(session.query(NetworkInterface.resource_id).filter(NetworkInterface.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))))))

  🚨 Line 227: direct_query (in_or_notin_)
     Code: Instance.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))

  ⚠️  Line 229: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 232: direct_query (in_or_notin_)
     Code: Instance.resource_id.in_(session.query(NetworkInterface.resource_id).filter(NetworkInterface.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))))
     Arg:  session.query(NetworkInterface.resource_id).filter(NetworkInterface.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))))

  🚨 Line 234: direct_query (in_or_notin_)
     Code: NetworkInterface.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))

  ⚠️  Line 236: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/service_app.py:
  ⚠️  Line 235: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/api_accounting_config.py:
  🚨 Line 277: direct_query (in_or_notin_)
     Code: StorageContainer.resource_id.in_(session.query(StorageContainerPermission.resource_id).filter(StorageContainerPermission.grantee.in_(grantees)))
     Arg:  session.query(StorageContainerPermission.resource_id).filter(StorageContainerPermission.grantee.in_(grantees))

  🚨 Line 420: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(session.query(ApiAccountingConfig.organization_service_id.distinct()).filter(ApiAccountingConfig.multi_region.is_(True)))
     Arg:  session.query(ApiAccountingConfig.organization_service_id.distinct()).filter(ApiAccountingConfig.multi_region.is_(True))

  ⚠️  Line 917: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(api_query)
     Arg:  api_query

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/network_endpoint.py:
  🚨 Line 36: direct_query (in_or_notin_)
     Code: db_cls.service_name.notin_(session.query(NetworkEndpointService.service_name))
     Arg:  session.query(NetworkEndpointService.service_name)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/organization_service.py:
  🚨 Line 132: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(ServiceUser.organization_service_id).filter(ServiceUser.user_name == 'Root Account', ServiceUser.active_api_keys != 0))
     Arg:  session.query(ServiceUser.organization_service_id).filter(ServiceUser.user_name == 'Root Account', ServiceUser.active_api_keys != 0)

  🚨 Line 159: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.identity_summary).filter(ResourceProperty.value.like('%"account_access_keys_present": "1"%')))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.identity_summary).filter(ResourceProperty.value.like('%"account_access_keys_present": "1"%'))

  🚨 Line 182: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(ServiceUser.organization_service_id).filter(ServiceUser.user_name == 'Root Account', ServiceUser.two_factor_enabled.is_(False), ServiceUser.login_profile.is_(True)))
     Arg:  session.query(ServiceUser.organization_service_id).filter(ServiceUser.user_name == 'Root Account', ServiceUser.two_factor_enabled.is_(False), ServiceUser.login_profile.is_(True))

  🚨 Line 207: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(ServiceUser.organization_service_id).filter(ServiceUser.user_name == 'Root Account', ServiceUser.two_factor_enabled.is_(True)))
     Arg:  session.query(ServiceUser.organization_service_id).filter(ServiceUser.user_name == 'Root Account', ServiceUser.two_factor_enabled.is_(True))

  🚨 Line 255: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(session.query(ServiceUser.organization_service_id))
     Arg:  session.query(ServiceUser.organization_service_id)

  🚨 Line 403: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(db_class.organization_service_id).filter(getattr(db_class, name_field).op('REGEXP')(regex_resource_names)))
     Arg:  session.query(db_class.organization_service_id).filter(getattr(db_class, name_field).op('REGEXP')(regex_resource_names))

  🚨 Line 411: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(db_class.organization_service_id).filter(getattr(db_class, name_field).in_(resource_names)))
     Arg:  session.query(db_class.organization_service_id).filter(getattr(db_class, name_field).in_(resource_names))

  🚨 Line 495: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(session.query(db_class.organization_service_id).filter(getattr(db_class, name_field).op('REGEXP')(regex_resource_names)))
     Arg:  session.query(db_class.organization_service_id).filter(getattr(db_class, name_field).op('REGEXP')(regex_resource_names))

  🚨 Line 503: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(session.query(db_class.organization_service_id).filter(getattr(db_class, name_field).in_(resource_names)))
     Arg:  session.query(db_class.organization_service_id).filter(getattr(db_class, name_field).in_(resource_names))

  ⚠️  Line 1395: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1530: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(subq)
     Arg:  subq

  🚨 Line 1614: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.bucket_public_policy).filter(func.json_extract(ResourceProperty.value, '$."{}"'.format(settings_config['policy_option'])) == func.cast(True, types.JSON)))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.bucket_public_policy).filter(func.json_extract(ResourceProperty.value, '$."{}"'.format(settings_config['policy_option'])) == func.cast(True, types.JSON))

  ⚠️  Line 1667: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1669: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🚨 Line 1888: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(OrganizationServiceAccount.organization_service_id).filter(OrganizationServiceAccount.status == 'active').filter(OrganizationServiceAccount.account_id.notin_(session.query(db_cls.account_id).filter(db_cls.account_id.isnot(None)))))
     Arg:  session.query(OrganizationServiceAccount.organization_service_id).filter(OrganizationServiceAccount.status == 'active').filter(OrganizationServiceAccount.account_id.notin_(session.query(db_cls.account_id).filter(db_cls.account_id.isnot(None))))

  🚨 Line 1892: direct_query (in_or_notin_)
     Code: OrganizationServiceAccount.account_id.notin_(session.query(db_cls.account_id).filter(db_cls.account_id.isnot(None)))
     Arg:  session.query(db_cls.account_id).filter(db_cls.account_id.isnot(None))

  🚨 Line 1995: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(session.query(ResourceCommonData.organization_service_id).filter(ResourceCommonData.resource_type.notin_([ResourceType.PRIVATE_NETWORK, ResourceType.PRIVATE_SUBNET, ResourceType.NETWORK_INTERFACE, ResourceType.ROUTE, ResourceType.ROUTE_TABLE, ResourceType.RESOURCE_ACCESS_LIST, ResourceType.RESOURCE_ACCESS_LIST_RULE, ResourceType.SERVICE_GROUP, ResourceType.SERVICE_USER, ResourceType.SERVICE_POLICY, ResourceType.SERVICE_MANAGED_POLICY, ResourceType.SERVICE_ROLE, ResourceType.AVAILABILITY_ZONE, ResourceType.SERVICE_REGION, ResourceType.INSTANCE_FLAVOR, ResourceType.PRIVATE_IMAGE, ResourceType.SSH_KEY_PAIR, ResourceType.SERVICE_ACCESS_KEY, ResourceType.SERVICE_CERTIFICATE, ResourceType.DIVVY_ORGANIZATION_SERVICE, ResourceType.DOMAIN_GROUP, ResourceType.DOMAIN_USER])).group_by(ResourceCommonData.organization_service_id))
     Arg:  session.query(ResourceCommonData.organization_service_id).filter(ResourceCommonData.resource_type.notin_([ResourceType.PRIVATE_NETWORK, ResourceType.PRIVATE_SUBNET, ResourceType.NETWORK_INTERFACE, ResourceType.ROUTE, ResourceType.ROUTE_TABLE, ResourceType.RESOURCE_ACCESS_LIST, ResourceType.RESOURCE_ACCESS_LIST_RULE, ResourceType.SERVICE_GROUP, ResourceType.SERVICE_USER, ResourceType.SERVICE_POLICY, ResourceType.SERVICE_MANAGED_POLICY, ResourceType.SERVICE_ROLE, ResourceType.AVAILABILITY_ZONE, ResourceType.SERVICE_REGION, ResourceType.INSTANCE_FLAVOR, ResourceType.PRIVATE_IMAGE, ResourceType.SSH_KEY_PAIR, ResourceType.SERVICE_ACCESS_KEY, ResourceType.SERVICE_CERTIFICATE, ResourceType.DIVVY_ORGANIZATION_SERVICE, ResourceType.DOMAIN_GROUP, ResourceType.DOMAIN_USER])).group_by(ResourceCommonData.organization_service_id)

  🚨 Line 2054: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(Network.organization_service_id).group_by(Network.organization_service_id, Network.region_name).having(func.count(Network.region_name) > 1))
     Arg:  session.query(Network.organization_service_id).group_by(Network.organization_service_id, Network.region_name).having(func.count(Network.region_name) > 1)

  ⚠️  Line 2269: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(subquery)
     Arg:  subquery

  ⚠️  Line 2472: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(subq)
     Arg:  subq

  ⚠️  Line 2658: query_variable (in_or_notin_)
     Code: OrganizationService.organization_service_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 3203: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 3381: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(session.query(ServicePolicyDocument.organization_service_id).filter(or_(*or_stmts)))
     Arg:  session.query(ServicePolicyDocument.organization_service_id).filter(or_(*or_stmts))

  🚨 Line 3575: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(session.query(BastionHost.organization_service_id))
     Arg:  session.query(BastionHost.organization_service_id)

  ⚠️  Line 3698: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subquery)
     Arg:  subquery

  ⚠️  Line 3830: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(subquery)
     Arg:  subquery

  ⚠️  Line 3881: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(subquery)
     Arg:  subquery

  ⚠️  Line 3911: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(subquery)
     Arg:  subquery

  ⚠️  Line 3940: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subquery)
     Arg:  subquery

  ⚠️  Line 3968: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(subq)
     Arg:  subq

  ⚠️  Line 4015: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(subq)
     Arg:  subq

  🚨 Line 4035: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(session.query(ApplicationInsight.organization_service_id))
     Arg:  session.query(ApplicationInsight.organization_service_id)

  ⚠️  Line 4166: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(subquery)
     Arg:  subquery

  ⚠️  Line 4344: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(subquery)
     Arg:  subquery

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/waf.py:
  ⚠️  Line 411: query_variable (in_or_notin_)
     Code: RAS.web_acl_id.in_(subq)
     Arg:  subq

  🚨 Line 417: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq))

  ⚠️  Line 418: query_variable (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 423: query_variable (in_or_notin_)
     Code: db_cls.web_acl_id.in_(subq)
     Arg:  subq

  ⚠️  Line 812: query_variable (in_or_notin_)
     Code: RAS.web_acl_id.in_(subq)
     Arg:  subq

  🚨 Line 818: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq))

  ⚠️  Line 819: query_variable (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 824: query_variable (in_or_notin_)
     Code: db_cls.web_acl_id.in_(subq)
     Arg:  subq

  ⚠️  Line 973: query_variable (in_or_notin_)
     Code: RAS.web_acl_id.in_(subq)
     Arg:  subq

  🚨 Line 979: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq))

  ⚠️  Line 980: query_variable (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 985: query_variable (in_or_notin_)
     Code: db_cls.web_acl_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1144: query_variable (in_or_notin_)
     Code: RAS.web_acl_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1148: query_variable (in_or_notin_)
     Code: RAS.web_acl_id.in_(subq)
     Arg:  subq

  🚨 Line 1156: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq))

  ⚠️  Line 1157: query_variable (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1159: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('waf%')))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('waf%'))

  🚨 Line 1167: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq))

  ⚠️  Line 1168: query_variable (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1174: query_variable (in_or_notin_)
     Code: db_cls.web_acl_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1176: query_variable (in_or_notin_)
     Code: db_cls.web_acl_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1265: query_variable (in_or_notin_)
     Code: RAS.web_acl_id.in_(subq)
     Arg:  subq

  🚨 Line 1271: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq))

  ⚠️  Line 1272: query_variable (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1280: query_variable (in_or_notin_)
     Code: db_cls.web_acl_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1287: query_variable (in_or_notin_)
     Code: RAS.web_acl_id.in_(subq)
     Arg:  subq

  🚨 Line 1293: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.in_(subq))

  ⚠️  Line 1294: query_variable (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1299: query_variable (in_or_notin_)
     Code: db_cls.web_acl_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1714: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1716: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/service_group.py:
  🚨 Line 52: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('serviceuser%')).filter(ResourceLink.right_resource_id.like('servicegroup%')))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('serviceuser%')).filter(ResourceLink.right_resource_id.like('servicegroup%'))

  🚨 Line 103: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('serviceuser%')).filter(ResourceLink.right_resource_id.like('servicegroup%')))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('serviceuser%')).filter(ResourceLink.right_resource_id.like('servicegroup%'))

  🚨 Line 186: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('serviceuser%')).filter(ResourceLink.right_resource_id.like('servicegroup%')).group_by(ResourceLink.right_resource_id).having(func.count(ResourceLink.right_resource_id) > settings_config['user_count']))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('serviceuser%')).filter(ResourceLink.right_resource_id.like('servicegroup%')).group_by(ResourceLink.right_resource_id).having(func.count(ResourceLink.right_resource_id) > settings_config['user_count'])

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/dnszone.py:
  ⚠️  Line 156: query_variable (in_or_notin_)
     Code: db_cls.zone_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 158: query_variable (in_or_notin_)
     Code: db_cls.zone_id.in_(subq)
     Arg:  subq

  ⚠️  Line 197: query_variable (in_or_notin_)
     Code: db_cls.zone_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 199: query_variable (in_or_notin_)
     Code: db_cls.zone_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/iam.py:
  ⚠️  Line 116: query_variable (in_or_notin_)
     Code: db_cls.role_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 189: query_variable (in_or_notin_)
     Code: IAM_EffectiveAccess.entity_id.in_(subq)
     Arg:  subq

  ⚠️  Line 197: query_variable (in_or_notin_)
     Code: IAM_EffectiveAccess.entity_id.in_(subq)
     Arg:  subq

  ⚠️  Line 290: query_variable (in_or_notin_)
     Code: IAM_EffectiveAccess.entity_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/ssmdocument.py:
  🚨 Line 27: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(SnapshotPermission.parent_resource_id).filter(SnapshotPermission.trusted_accounts.like('%{}%'.format('all'))))
     Arg:  session.query(SnapshotPermission.parent_resource_id).filter(SnapshotPermission.trusted_accounts.like('%{}%'.format('all')))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/service_detector.py:
  🚨 Line 50: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.account_id.in_(accounts)))
     Arg:  session.query(DbObjects.OrganizationService.organization_service_id).filter(DbObjects.OrganizationService.account_id.in_(accounts))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/database_cluster.py:
  ⚠️  Line 601: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 603: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 707: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 709: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 805: query_variable (in_or_notin_)
     Code: db_cls.parameter_group.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/autoscaling_launch_configuration.py:
  🚨 Line 43: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(AutoscalingLaunchConfiguration.resource_id).filter(AutoscalingLaunchConfiguration.resource_id == ResourceLink.right_resource_id).filter(ResourceLink.right_resource_id.like('autoscalinglaunchconfiguration%')).filter(ResourceLink.left_resource_id.like('autoscalinggroup%')))
     Arg:  session.query(AutoscalingLaunchConfiguration.resource_id).filter(AutoscalingLaunchConfiguration.resource_id == ResourceLink.right_resource_id).filter(ResourceLink.right_resource_id.like('autoscalinglaunchconfiguration%')).filter(ResourceLink.left_resource_id.like('autoscalinggroup%'))

  🚨 Line 71: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(AutoscalingLaunchConfiguration.resource_id).filter(AutoscalingLaunchConfiguration.resource_id == ResourceLink.right_resource_id).filter(ResourceLink.right_resource_id.like('autoscalinglaunchconfiguration%')).filter(ResourceLink.left_resource_id.like('autoscalinggroup%')))
     Arg:  session.query(AutoscalingLaunchConfiguration.resource_id).filter(AutoscalingLaunchConfiguration.resource_id == ResourceLink.right_resource_id).filter(ResourceLink.right_resource_id.like('autoscalinglaunchconfiguration%')).filter(ResourceLink.left_resource_id.like('autoscalinggroup%'))

  🚨 Line 104: direct_query (in_or_notin_)
     Code: db_cls.image_id.notin_(session.query(PrivateImage.image_id))
     Arg:  session.query(PrivateImage.image_id)

  🚨 Line 105: direct_query (in_or_notin_)
     Code: db_cls.image_id.notin_(session.query(SharedImage.image_id))
     Arg:  session.query(SharedImage.image_id)

  🚨 Line 142: direct_query (in_or_notin_)
     Code: db_cls.image_id.in_(session.query(PrivateImage.image_id).filter(PrivateImage.creation_date <= threshold))
     Arg:  session.query(PrivateImage.image_id).filter(PrivateImage.creation_date <= threshold)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/stack_template.py:
  🚨 Line 43: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceTag.resource_id).filter(ResourceTag.resource_id.like(db_cls.resource_type + ':%')))
     Arg:  session.query(ResourceTag.resource_id).filter(ResourceTag.resource_id.like(db_cls.resource_type + ':%'))

  🚨 Line 235: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(StackTemplateResource.stack_resource_id).filter(StackTemplateResource.resource_id.in_(subq)).filter(StackTemplateResource.resource_id.like('%sg-%')))
     Arg:  session.query(StackTemplateResource.stack_resource_id).filter(StackTemplateResource.resource_id.in_(subq)).filter(StackTemplateResource.resource_id.like('%sg-%'))

  ⚠️  Line 237: query_variable (in_or_notin_)
     Code: StackTemplateResource.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 274: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(StackTemplateResource.stack_resource_id).filter(StackTemplateResource.resource_id.in_(subq)))
     Arg:  session.query(StackTemplateResource.stack_resource_id).filter(StackTemplateResource.resource_id.in_(subq))

  ⚠️  Line 275: query_variable (in_or_notin_)
     Code: StackTemplateResource.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 308: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(StackTemplateResource.stack_resource_id).filter(StackTemplateResource.resource_id.in_(subq)))
     Arg:  session.query(StackTemplateResource.stack_resource_id).filter(StackTemplateResource.resource_id.in_(subq))

  ⚠️  Line 309: query_variable (in_or_notin_)
     Code: StackTemplateResource.resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/template_spec.py:
  ⚠️  Line 38: query_variable (in_or_notin_)
     Code: db_cls.template_name.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/ml_instance.py:
  ⚠️  Line 163: query_variable (in_or_notin_)
     Code: db_cls.role_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 201: query_variable (in_or_notin_)
     Code: db_cls.role_resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 472: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 474: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 506: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 508: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/search_index.py:
  ⚠️  Line 45: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 47: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 106: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq_no_vpc)
     Arg:  subq_no_vpc

  ⚠️  Line 120: query_variable (in_or_notin_)
     Code: SearchIndexDataSource.resource_id.in_(subq_any)
     Arg:  subq_any

  ⚠️  Line 131: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 132: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 166: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 167: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/public_ip.py:
  ⚠️  Line 95: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(lb_subq)
     Arg:  lb_subq

  ⚠️  Line 99: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(lb_subq)
     Arg:  lb_subq

  ⚠️  Line 100: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(fw_subq)
     Arg:  fw_subq

  ⚠️  Line 101: query_variable (in_or_notin_)
     Code: db_cls.public_ip.notin_(natgw_subq)
     Arg:  natgw_subq

  ⚠️  Line 102: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(bastion_host_subq)
     Arg:  bastion_host_subq

  ⚠️  Line 105: query_variable (in_or_notin_)
     Code: db_cls.network_interface_resource_id.in_(vm_subq)
     Arg:  vm_subq

  ⚠️  Line 144: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 245: query_variable (in_or_notin_)
     Code: db_cls.network_interface_resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/database.py:
  🚨 Line 63: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.auditing).filter(func.json_contains(ResourceProperty.value, '{"enabled": true}')))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.auditing).filter(func.json_contains(ResourceProperty.value, '{"enabled": true}'))

  🚨 Line 87: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.auditing).filter(func.json_contains(ResourceProperty.value, '{"enabled": false}')))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.auditing).filter(func.json_contains(ResourceProperty.value, '{"enabled": false}'))

  🚨 Line 111: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.threat_detection).filter(func.json_contains(ResourceProperty.value, '{"enabled": true}')))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.threat_detection).filter(func.json_contains(ResourceProperty.value, '{"enabled": true}'))

  🚨 Line 135: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.threat_detection).filter(func.json_contains(ResourceProperty.value, '{"enabled": false}')))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.threat_detection).filter(func.json_contains(ResourceProperty.value, '{"enabled": false}'))

  ⚠️  Line 176: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 237: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 273: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 322: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 371: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 468: query_variable (in_or_notin_)
     Code: db_cls.instance_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 826: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name.in_(database_types)))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name.in_(database_types))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/webapp.py:
  🚨 Line 337: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(dbo.WebApp.resource_id).join(dbo.AppServer, dbo.AppServer.resource_id == dbo.WebApp.app_server_resource_id).filter(and_(not_(dbo.AppServer.server_type.like('%Dynamic')), dbo.WebApp.network_resource_id.is_(None))))
     Arg:  session.query(dbo.WebApp.resource_id).join(dbo.AppServer, dbo.AppServer.resource_id == dbo.WebApp.app_server_resource_id).filter(and_(not_(dbo.AppServer.server_type.like('%Dynamic')), dbo.WebApp.network_resource_id.is_(None)))

  ⚠️  Line 551: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 604: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 1018: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(query_resource_ids)
     Arg:  query_resource_ids

  ⚠️  Line 1025: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(query_resource_ids)
     Arg:  query_resource_ids

  🚨 Line 1053: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(dbo.WebApp.resource_id).join(dbo.AppServiceEnvironment, dbo.AppServiceEnvironment.resource_id == dbo.WebApp.app_service_env_resource_id))
     Arg:  session.query(dbo.WebApp.resource_id).join(dbo.AppServiceEnvironment, dbo.AppServiceEnvironment.resource_id == dbo.WebApp.app_service_env_resource_id)

  🚨 Line 1061: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(dbo.WebApp.resource_id).join(dbo.AppServiceEnvironment, dbo.AppServiceEnvironment.resource_id == dbo.WebApp.app_service_env_resource_id))
     Arg:  session.query(dbo.WebApp.resource_id).join(dbo.AppServiceEnvironment, dbo.AppServiceEnvironment.resource_id == dbo.WebApp.app_service_env_resource_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/macie_service.py:
  ⚠️  Line 59: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/service_certificate.py:
  🚨 Line 250: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%')))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%'))

  🚨 Line 255: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ContentDeliveryNetwork.certificate_resource_id).filter(ContentDeliveryNetwork.certificate_resource_id.isnot(None)))
     Arg:  session.query(ContentDeliveryNetwork.certificate_resource_id).filter(ContentDeliveryNetwork.certificate_resource_id.isnot(None))

  🚨 Line 268: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%')))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%'))

  🚨 Line 273: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ContentDeliveryNetwork.certificate_resource_id).filter(ContentDeliveryNetwork.certificate_resource_id.isnot(None)))
     Arg:  session.query(ContentDeliveryNetwork.certificate_resource_id).filter(ContentDeliveryNetwork.certificate_resource_id.isnot(None))

  ⚠️  Line 319: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 321: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🟡 Line 577: possible_row_attribute (==)
     Code: DnsZoneRecord.data == db_cls.validation_record
     Arg:  db_cls.validation_record

  🟡 Line 577: possible_row_attribute (==)
     Code: DnsZoneRecord.record_type == db_cls.validation_record_type
     Arg:  db_cls.validation_record_type

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/load_balancer.py:
  ⚠️  Line 495: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🚨 Line 808: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(LoadBalancerTarget.resource_id).filter(LoadBalancerTarget.target_health.in_(['unhealthy', 'unavailable'])))
     Arg:  session.query(LoadBalancerTarget.resource_id).filter(LoadBalancerTarget.target_health.in_(['unhealthy', 'unavailable']))

  🚨 Line 837: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%')))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%'))

  🚨 Line 842: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(TargetProxy.load_balancer_resource_id).filter(TargetProxy.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%')))))
     Arg:  session.query(TargetProxy.load_balancer_resource_id).filter(TargetProxy.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%'))))

  🚨 Line 844: direct_query (in_or_notin_)
     Code: TargetProxy.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%')))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%'))

  🚨 Line 874: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%')))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%'))

  🚨 Line 897: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(TargetProxy.load_balancer_resource_id).filter(TargetProxy.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%')))))
     Arg:  session.query(TargetProxy.load_balancer_resource_id).filter(TargetProxy.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%'))))

  🚨 Line 899: direct_query (in_or_notin_)
     Code: TargetProxy.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%')))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('servicecertificate:%'))

  🚨 Line 951: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(backend_service_rids)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(backend_service_rids))

  🚨 Line 978: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ServiceCheckResource.resource_id).filter(ServiceCheckResource.check_resource_id.like('%a2sEc6ILx:')).filter(ServiceCheckResource.alert_level == 'red'))
     Arg:  session.query(ServiceCheckResource.resource_id).filter(ServiceCheckResource.check_resource_id.like('%a2sEc6ILx:')).filter(ServiceCheckResource.alert_level == 'red')

  🚨 Line 1020: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(TargetProxy.load_balancer_resource_id).filter(TargetProxy.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))))
     Arg:  session.query(TargetProxy.load_balancer_resource_id).filter(TargetProxy.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))))

  🚨 Line 1022: direct_query (in_or_notin_)
     Code: TargetProxy.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))

  ⚠️  Line 1023: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1094: direct_query (in_or_notin_)
     Code: db_cls.fqdn.in_(session.query(DnsZoneRecord.data).filter(DnsZoneRecord.record_type == 'CNAME'))
     Arg:  session.query(DnsZoneRecord.data).filter(DnsZoneRecord.record_type == 'CNAME')

  🚨 Line 1116: direct_query (in_or_notin_)
     Code: db_cls.fqdn.notin_(session.query(DnsZoneRecord.data).filter(DnsZoneRecord.record_type == 'CNAME'))
     Arg:  session.query(DnsZoneRecord.data).filter(DnsZoneRecord.record_type == 'CNAME')

  🚨 Line 1143: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('waf:%')))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('waf:%'))

  🚨 Line 1174: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('waf:%')))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('waf:%'))

  🚨 Line 1239: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(LoadBalancerTarget.resource_id).filter(LoadBalancerTarget.target_port.notin_(settings_config['ports'])))
     Arg:  session.query(LoadBalancerTarget.resource_id).filter(LoadBalancerTarget.target_port.notin_(settings_config['ports']))

  🚨 Line 1248: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(LoadBalancerTarget.resource_id).filter(LoadBalancerTarget.target_port.in_(settings_config['ports'])))
     Arg:  session.query(LoadBalancerTarget.resource_id).filter(LoadBalancerTarget.target_port.in_(settings_config['ports']))

  ⚠️  Line 1399: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🚨 Line 1624: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))

  ⚠️  Line 1625: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1630: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))

  ⚠️  Line 1631: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1675: direct_query (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(session.query(WebApplicationFirewall.resource_id).filter(WebApplicationFirewall.waf_type == settings_config['cloud_armor_policy_type']))
     Arg:  session.query(WebApplicationFirewall.resource_id).filter(WebApplicationFirewall.waf_type == settings_config['cloud_armor_policy_type'])

  ⚠️  Line 1683: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(backends_with_policy_type_subq)
     Arg:  backends_with_policy_type_subq

  ⚠️  Line 1685: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(backends_with_policy_type_subq)
     Arg:  backends_with_policy_type_subq

  🚨 Line 1693: direct_query (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(session.query(WebApplicationFirewall.resource_id).filter(WebApplicationFirewall.waf_type == cloud_armor_policy_type))
     Arg:  session.query(WebApplicationFirewall.resource_id).filter(WebApplicationFirewall.waf_type == cloud_armor_policy_type)

  🚨 Line 1758: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))

  ⚠️  Line 1759: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1764: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))

  ⚠️  Line 1765: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1806: direct_query (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(session.query(WebApplicationFirewall.resource_id).filter(name_condition, WebApplicationFirewall.waf_type.in_(['CLOUD_ARMOR', 'CLOUD_ARMOR_EDGE'])))
     Arg:  session.query(WebApplicationFirewall.resource_id).filter(name_condition, WebApplicationFirewall.waf_type.in_(['CLOUD_ARMOR', 'CLOUD_ARMOR_EDGE']))

  🚨 Line 1900: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(TargetProxy.load_balancer_resource_id).filter(TargetProxy.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(session.query(SSLPolicy.resource_id).filter(or_(*conditions)))))))
     Arg:  session.query(TargetProxy.load_balancer_resource_id).filter(TargetProxy.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(session.query(SSLPolicy.resource_id).filter(or_(*conditions))))))

  🚨 Line 1902: direct_query (in_or_notin_)
     Code: TargetProxy.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(session.query(SSLPolicy.resource_id).filter(or_(*conditions)))))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(session.query(SSLPolicy.resource_id).filter(or_(*conditions))))

  🚨 Line 1904: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(SSLPolicy.resource_id).filter(or_(*conditions)))
     Arg:  session.query(SSLPolicy.resource_id).filter(or_(*conditions))

  ⚠️  Line 2090: query_variable (in_or_notin_)
     Code: db_cls.load_balancer_id.in_(subq)
     Arg:  subq

  ⚠️  Line 2092: query_variable (in_or_notin_)
     Code: db_cls.load_balancer_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/domain_group.py:
  🚨 Line 26: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(DomainMember.group_resource_id).filter(DomainMember.role == 'owner'))
     Arg:  session.query(DomainMember.group_resource_id).filter(DomainMember.role == 'owner')

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/app_runner_service.py:
  ⚠️  Line 74: query_variable (in_or_notin_)
     Code: db_cls.service_id.in_(container_repository_type_subq)
     Arg:  container_repository_type_subq

  ⚠️  Line 168: query_variable (in_or_notin_)
     Code: db_cls.service_id.in_(container_image_regex_subq)
     Arg:  container_image_regex_subq

  ⚠️  Line 177: query_variable (in_or_notin_)
     Code: db_cls.service_id.in_(container_image_regex_subq)
     Arg:  container_image_regex_subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/resource_agent.py:
  ⚠️  Line 352: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(rvn_subq)
     Arg:  rvn_subq

  ⚠️  Line 352: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(vm_subq)
     Arg:  vm_subq

  ⚠️  Line 356: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(rvn_subq)
     Arg:  rvn_subq

  ⚠️  Line 356: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(vm_subq)
     Arg:  vm_subq

  ⚠️  Line 356: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(dependency_subq)
     Arg:  dependency_subq

  ⚠️  Line 431: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(rvn_subq)
     Arg:  rvn_subq

  ⚠️  Line 431: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(vm_subq)
     Arg:  vm_subq

  ⚠️  Line 437: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(rvn_subq)
     Arg:  rvn_subq

  ⚠️  Line 438: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(vm_subq)
     Arg:  vm_subq

  ⚠️  Line 1155: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(ra_query)
     Arg:  ra_query

  ⚠️  Line 1157: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(ra_query)
     Arg:  ra_query

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/threatfinding.py:
  🚨 Line 150: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(DbObjects.ThreatFindingResource.threat_finding_resource_id).filter(DbObjects.ThreatFindingResource.sample_data.is_(True)))
     Arg:  session.query(DbObjects.ThreatFindingResource.threat_finding_resource_id).filter(DbObjects.ThreatFindingResource.sample_data.is_(True))

  🚨 Line 180: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(DbObjects.ThreatFindingResource.threat_finding_resource_id).filter(DbObjects.ThreatFindingResource.sample_data.is_(True)))
     Arg:  session.query(DbObjects.ThreatFindingResource.threat_finding_resource_id).filter(DbObjects.ThreatFindingResource.sample_data.is_(True))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/service_encryption_key_vault.py:
  ⚠️  Line 98: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 135: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 164: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 257: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(source_network_subq)
     Arg:  source_network_subq

  ⚠️  Line 258: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(source_subnet_subq)
     Arg:  source_subnet_subq

  ⚠️  Line 259: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(source_exception_subq)
     Arg:  source_exception_subq

  🚨 Line 363: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ServiceEncryptionKeyVaultPolicy.resource_id).filter(and_(ServiceEncryptionKeyVaultPolicy.object_id.notin_(groups_subq), ServiceEncryptionKeyVaultPolicy.object_id.notin_(sp_subq), ServiceEncryptionKeyVaultPolicy.object_type.notin_(federated_roles))))
     Arg:  session.query(ServiceEncryptionKeyVaultPolicy.resource_id).filter(and_(ServiceEncryptionKeyVaultPolicy.object_id.notin_(groups_subq), ServiceEncryptionKeyVaultPolicy.object_id.notin_(sp_subq), ServiceEncryptionKeyVaultPolicy.object_type.notin_(federated_roles)))

  ⚠️  Line 366: query_variable (in_or_notin_)
     Code: ServiceEncryptionKeyVaultPolicy.object_id.notin_(groups_subq)
     Arg:  groups_subq

  ⚠️  Line 367: query_variable (in_or_notin_)
     Code: ServiceEncryptionKeyVaultPolicy.object_id.notin_(sp_subq)
     Arg:  sp_subq

  ⚠️  Line 425: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🚨 Line 481: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ServiceEncryptionKeyVaultPolicy.resource_id).filter(ServiceEncryptionKeyVaultPolicy.object_type == user_type))
     Arg:  session.query(ServiceEncryptionKeyVaultPolicy.resource_id).filter(ServiceEncryptionKeyVaultPolicy.object_type == user_type)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/resource.py:
  🚨 Line 974: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceCommonData.resource_id).filter(ResourceCommonData.namespace_id.op('regexp')('%s' % expression)))
     Arg:  session.query(ResourceCommonData.resource_id).filter(ResourceCommonData.namespace_id.op('regexp')('%s' % expression))

  🚨 Line 1393: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceCommonData.resource_id).filter(ResourceCommonData.modified_timestamp >= datetime.utcnow() - timedelta(hours=settings_config.get('hours', 24))))
     Arg:  session.query(ResourceCommonData.resource_id).filter(ResourceCommonData.modified_timestamp >= datetime.utcnow() - timedelta(hours=settings_config.get('hours', 24)))

  🚨 Line 1402: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceCommonData.resource_id).filter(ResourceCommonData.modified_timestamp >= datetime.utcnow() - timedelta(hours=settings_config.get('hours', 24))))
     Arg:  session.query(ResourceCommonData.resource_id).filter(ResourceCommonData.modified_timestamp >= datetime.utcnow() - timedelta(hours=settings_config.get('hours', 24)))

  🚨 Line 1613: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceNoncompliance.resource_id))
     Arg:  session.query(ResourceNoncompliance.resource_id)

  🟡 Line 1896: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.DATA_STREAM
     Arg:  ResourceType.DATA_STREAM

  🟡 Line 1900: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.DATABASE
     Arg:  ResourceType.DATABASE

  🟡 Line 1902: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.DATABASE_MIGRATION_INSTANCE
     Arg:  ResourceType.DATABASE_MIGRATION_INSTANCE

  ⚠️  Line 2093: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 2168: query_variable (in_or_notin_)
     Code: NetworkInterface.network_resource_id.in_(network_interface_subq)
     Arg:  network_interface_subq

  ⚠️  Line 2173: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 2176: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 2178: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 2187: query_variable (in_or_notin_)
     Code: db_cls.network_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 2190: query_variable (in_or_notin_)
     Code: db_cls.network_resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 2192: query_variable (in_or_notin_)
     Code: db_cls.network_resource_id.notin_(subq)
     Arg:  subq

  🚨 Line 2231: direct_query (in_or_notin_)
     Code: ResourceGroupResource.resource_group_id.in_(session.query(ResourceGroup.resource_group_id).filter(ResourceGroup.name.in_(settings_config['resource_groups'])))
     Arg:  session.query(ResourceGroup.resource_group_id).filter(ResourceGroup.name.in_(settings_config['resource_groups']))

  ⚠️  Line 2245: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🚨 Line 2282: direct_query (in_or_notin_)
     Code: ResourceGroupResource.resource_group_id.in_(session.query(ResourceGroup.resource_group_id).filter(ResourceGroup.name.in_(settings_config['resource_groups'])))
     Arg:  session.query(ResourceGroup.resource_group_id).filter(ResourceGroup.name.in_(settings_config['resource_groups']))

  ⚠️  Line 2296: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 2411: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 2413: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🟡 Line 2448: possible_row_variable (==)
     Code: db_cls == BigDataServerlessWorkgroup
     Arg:  BigDataServerlessWorkgroup

  🟡 Line 2452: possible_row_variable (==)
     Code: db_cls == DatabaseInstance
     Arg:  DatabaseInstance

  🟡 Line 2460: possible_row_variable (==)
     Code: db_cls == SpannerDatabase
     Arg:  SpannerDatabase

  🚨 Line 2469: direct_query (in_or_notin_)
     Code: ResourceGroupResource.resource_group_id.in_(session.query(ResourceGroup.resource_group_id).filter(ResourceGroup.name.in_(settings_config['resource_groups'])))
     Arg:  session.query(ResourceGroup.resource_group_id).filter(ResourceGroup.name.in_(settings_config['resource_groups']))

  ⚠️  Line 2477: query_variable (in_or_notin_)
     Code: getattr(db_cls, parent_col).in_(subq)
     Arg:  subq

  ⚠️  Line 2479: query_variable (in_or_notin_)
     Code: getattr(db_cls, parent_col).notin_(subq)
     Arg:  subq

  🟡 Line 2559: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.DATABASE
     Arg:  ResourceType.DATABASE

  ⚠️  Line 2645: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🚨 Line 2646: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id == ServiceGroup.resource_id).filter(or_(ServiceGroup.inline_policies.isnot(None), ServiceGroup.resource_id.in_(subq))))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id == ServiceGroup.resource_id).filter(or_(ServiceGroup.inline_policies.isnot(None), ServiceGroup.resource_id.in_(subq)))

  ⚠️  Line 2649: query_variable (in_or_notin_)
     Code: ServiceGroup.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 2654: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 3112: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(subq)
     Arg:  subq

  ⚠️  Line 3114: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(subq)
     Arg:  subq

  🚨 Line 3139: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(OrganizationService.organization_service_id).filter(clauses))
     Arg:  session.query(OrganizationService.organization_service_id).filter(clauses)

  🚨 Line 3193: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(session.query(OrganizationService.organization_service_id).filter(OrganizationService.resource_id.in_(badge_subq)))
     Arg:  session.query(OrganizationService.organization_service_id).filter(OrganizationService.resource_id.in_(badge_subq))

  ⚠️  Line 3195: query_variable (in_or_notin_)
     Code: OrganizationService.resource_id.in_(badge_subq)
     Arg:  badge_subq

  🚨 Line 3259: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(StackTemplateResource.resource_id))
     Arg:  session.query(StackTemplateResource.resource_id)

  🚨 Line 3289: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(StackTemplateResource.resource_id))
     Arg:  session.query(StackTemplateResource.resource_id)

  🚨 Line 3309: direct_query (in_or_notin_)
     Code: db_cls.network_resource_id.in_(session.query(Network.resource_id).filter(Network.type == 'legacy'))
     Arg:  session.query(Network.resource_id).filter(Network.type == 'legacy')

  🚨 Line 3330: direct_query (in_or_notin_)
     Code: db_cls.network_resource_id.in_(session.query(Network.resource_id).filter(Network.type != 'legacy'))
     Arg:  session.query(Network.resource_id).filter(Network.type != 'legacy')

  🚨 Line 3397: direct_query (in_or_notin_)
     Code: NetworkInterface.subnet_resource_id.in_(session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.subnet_id.in_(settings_config['subnet_id_list'])))
     Arg:  session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.subnet_id.in_(settings_config['subnet_id_list']))

  ⚠️  Line 3407: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 3409: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🚨 Line 3418: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.subnet_id.in_(settings_config['subnet_id_list'])))
     Arg:  session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.subnet_id.in_(settings_config['subnet_id_list']))

  ⚠️  Line 3428: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 3429: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.in_(resource_link_subq)
     Arg:  resource_link_subq

  ⚠️  Line 3435: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 3436: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.notin_(resource_link_subq)
     Arg:  resource_link_subq

  🚨 Line 3442: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.subnet_id.in_(settings_config['subnet_id_list'])))
     Arg:  session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.subnet_id.in_(settings_config['subnet_id_list']))

  ⚠️  Line 3450: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 3452: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 3589: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 3591: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 3606: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 3616: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 3622: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 3623: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.in_(resource_link_subq)
     Arg:  resource_link_subq

  ⚠️  Line 3629: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 3630: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.notin_(resource_link_subq)
     Arg:  resource_link_subq

  🚨 Line 3636: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(NetworkSubnet.resource_id).filter(and_(func.INET_ATON(func.substring_index(NetworkSubnet.cidr, '/', 1)) >= func.INET_ATON(settings_config['cidr_from']), func.INET_ATON(func.substring_index(NetworkSubnet.cidr, '/', 1)) <= func.INET_ATON(settings_config['cidr_end']))))
     Arg:  session.query(NetworkSubnet.resource_id).filter(and_(func.INET_ATON(func.substring_index(NetworkSubnet.cidr, '/', 1)) >= func.INET_ATON(settings_config['cidr_from']), func.INET_ATON(func.substring_index(NetworkSubnet.cidr, '/', 1)) <= func.INET_ATON(settings_config['cidr_end'])))

  🚨 Line 3649: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.cidr.in_(settings_config.get('subnet_cidr'))))
     Arg:  session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.cidr.in_(settings_config.get('subnet_cidr')))

  ⚠️  Line 3657: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 3659: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🚨 Line 3715: direct_query (in_or_notin_)
     Code: NetworkInterface.subnet_resource_id.in_(session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.public.is_(True)))
     Arg:  session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.public.is_(True))

  ⚠️  Line 3723: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 3725: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🚨 Line 3731: direct_query (in_or_notin_)
     Code: ContainerService.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.public.is_(True)))))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.public.is_(True))))

  🚨 Line 3733: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.public.is_(True)))
     Arg:  session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.public.is_(True))

  ⚠️  Line 3746: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 3748: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🚨 Line 3760: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.public.is_(True)))
     Arg:  session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.public.is_(True))

  ⚠️  Line 3768: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 3769: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.in_(resource_link_subq)
     Arg:  resource_link_subq

  ⚠️  Line 3775: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 3776: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.notin_(resource_link_subq)
     Arg:  resource_link_subq

  🚨 Line 3782: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.public.is_(True)))
     Arg:  session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.public.is_(True))

  ⚠️  Line 3788: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 3790: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🟡 Line 3851: possible_row_variable (<)
     Code: func.count(NetworkSubnet.availability_zone) < zone_count
     Arg:  zone_count

  🟡 Line 3853: possible_row_variable (==)
     Code: func.count(NetworkSubnet.availability_zone) == zone_count
     Arg:  zone_count

  🟡 Line 3855: possible_row_variable (>)
     Code: func.count(NetworkSubnet.availability_zone) > zone_count
     Arg:  zone_count

  ⚠️  Line 3857: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 3892: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.event_last_seen >= datetime.utcnow() - timedelta(days=settings_config['days'])))
     Arg:  session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.event_last_seen >= datetime.utcnow() - timedelta(days=settings_config['days']))

  🚨 Line 3950: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.severity == settings_config['severity']).filter(ThreatFindingResource.event_last_seen >= datetime.utcnow() - timedelta(hours=settings_config['hours'])))
     Arg:  session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.severity == settings_config['severity']).filter(ThreatFindingResource.event_last_seen >= datetime.utcnow() - timedelta(hours=settings_config['hours']))

  ⚠️  Line 4133: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 4135: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 5063: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceSubnetAccess.resource_id).filter(and_(ResourceSubnetAccess.rule_action == 'allow', ResourceSubnetAccess.network_resource_id.notin_(network_subq))))
     Arg:  session.query(ResourceSubnetAccess.resource_id).filter(and_(ResourceSubnetAccess.rule_action == 'allow', ResourceSubnetAccess.network_resource_id.notin_(network_subq)))

  ⚠️  Line 5067: query_variable (in_or_notin_)
     Code: ResourceSubnetAccess.network_resource_id.notin_(network_subq)
     Arg:  network_subq

  🚨 Line 5125: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceSubnetAccess.resource_id).filter(and_(ResourceSubnetAccess.rule_action == 'allow', ResourceSubnetAccess.subnet_resource_id.notin_(subnet_subq))))
     Arg:  session.query(ResourceSubnetAccess.resource_id).filter(and_(ResourceSubnetAccess.rule_action == 'allow', ResourceSubnetAccess.subnet_resource_id.notin_(subnet_subq)))

  ⚠️  Line 5129: query_variable (in_or_notin_)
     Code: ResourceSubnetAccess.subnet_resource_id.notin_(subnet_subq)
     Arg:  subnet_subq

  🚨 Line 5237: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))

  ⚠️  Line 5238: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 5240: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))))
     Arg:  session.query(NetworkInterface.instance_resource_id).filter(NetworkInterface.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))))

  🚨 Line 5242: direct_query (in_or_notin_)
     Code: NetworkInterface.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(subq))

  ⚠️  Line 5243: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 5247: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(rna_subq)
     Arg:  rna_subq

  🚨 Line 5291: direct_query (in_or_notin_)
     Code: OrganizationService.resource_id.in_(session.query(Badge.target_resource_id).filter(Badge.key == settings_config['badge_key']).filter(Badge.value == settings_config['badge_value']))
     Arg:  session.query(Badge.target_resource_id).filter(Badge.key == settings_config['badge_key']).filter(Badge.value == settings_config['badge_value'])

  🚨 Line 5391: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(certificate_set)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(certificate_set))

  ⚠️  Line 5460: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(source_network_subq)
     Arg:  source_network_subq

  🚨 Line 5485: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLock.resource_id))
     Arg:  session.query(ResourceLock.resource_id)

  🚨 Line 5755: direct_query (in_or_notin_)
     Code: ResourceGroup.resource_id.in_(session.query(ServiceResourceLock.target_resource_id).filter(ServiceResourceLock.lock_type.in_(lock_types), ServiceResourceLock.target_resource_type == 'resourcegroup', ServiceResourceLock.target_resource_id.isnot(None)))
     Arg:  session.query(ServiceResourceLock.target_resource_id).filter(ServiceResourceLock.lock_type.in_(lock_types), ServiceResourceLock.target_resource_type == 'resourcegroup', ServiceResourceLock.target_resource_id.isnot(None))

  ⚠️  Line 5767: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(direct_resource_subq)
     Arg:  direct_resource_subq

  ⚠️  Line 5767: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(rg_resource_subq)
     Arg:  rg_resource_subq

  ⚠️  Line 5772: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(direct_resource_subq)
     Arg:  direct_resource_subq

  ⚠️  Line 5772: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(rg_resource_subq)
     Arg:  rg_resource_subq

  ⚠️  Line 5943: query_variable (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(query_private_endpoints)
     Arg:  query_private_endpoints

  ⚠️  Line 5947: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(query_resources_with_private_endpoint)
     Arg:  query_resources_with_private_endpoint

  ⚠️  Line 5949: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(query_resources_with_private_endpoint)
     Arg:  query_resources_with_private_endpoint

  ⚠️  Line 6089: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq_not_approved_ip)
     Arg:  subq_not_approved_ip

  🟡 Line 6339: possible_row_attribute (==)
     Code: db_cls.resource_type == ResourceType.DATABASE_INSTANCE
     Arg:  ResourceType.DATABASE_INSTANCE

  🟡 Line 7129: possible_row_variable (==)
     Code: db_cls == ResourceCommonData
     Arg:  ResourceCommonData

  🟡 Line 7238: possible_row_variable (!=)
     Code: db_cls != ResourceCommonData
     Arg:  ResourceCommonData

  ⚠️  Line 7384: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 7446: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 7643: direct_query (in_or_notin_)
     Code: db_cls.role_resource_id.in_(session.query(ServiceRole.resource_id).filter(ServiceRole.default_service_role.is_(True)))
     Arg:  session.query(ServiceRole.resource_id).filter(ServiceRole.default_service_role.is_(True))

  ⚠️  Line 8015: query_variable (in_or_notin_)
     Code: RCD.namespace_id.in_(subq)
     Arg:  subq

  ⚠️  Line 8156: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 8189: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(policy_query)
     Arg:  policy_query

  🚨 Line 8264: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceCommonData.resource_id).filter(ResourceCommonData.namespace_id.in_(settings_config['user_ids'])))
     Arg:  session.query(ResourceCommonData.resource_id).filter(ResourceCommonData.namespace_id.in_(settings_config['user_ids']))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/etl_job.py:
  ⚠️  Line 35: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/service_access_key.py:
  🚨 Line 274: direct_query (in_or_notin_)
     Code: db_cls.role_resource_id.in_(session.query(dbo.ServiceRole.resource_id).filter(dbo.ServiceRole.name.like('%iam.gserviceaccount.com')))
     Arg:  session.query(dbo.ServiceRole.resource_id).filter(dbo.ServiceRole.name.like('%iam.gserviceaccount.com'))

  🚨 Line 299: direct_query (in_or_notin_)
     Code: db_cls.user_resource_id.in_(session.query(dbo.ServiceUser.resource_id).filter(dbo.ServiceUser.login_profile.is_(True)))
     Arg:  session.query(dbo.ServiceUser.resource_id).filter(dbo.ServiceUser.login_profile.is_(True))

  🚨 Line 324: direct_query (in_or_notin_)
     Code: db_cls.user_resource_id.in_(session.query(dbo.ServiceUser.resource_id).filter(dbo.ServiceUser.login_profile.is_(False)))
     Arg:  session.query(dbo.ServiceUser.resource_id).filter(dbo.ServiceUser.login_profile.is_(False))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/batch_environment.py:
  🚨 Line 169: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(db_cls.resource_id).join(flavor, and_(flavor.cloud_type_id.in_(ALL_AZURE), func.lower(db_cls.vm_size) == func.lower(flavor.name), bool_evaluate(flavor.vcpus, op, settings_config['vcpus']))))
     Arg:  session.query(db_cls.resource_id).join(flavor, and_(flavor.cloud_type_id.in_(ALL_AZURE), func.lower(db_cls.vm_size) == func.lower(flavor.name), bool_evaluate(flavor.vcpus, op, settings_config['vcpus'])))

  ⚠️  Line 227: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/comprehend.py:
  ⚠️  Line 143: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 145: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/control_policy.py:
  🚨 Line 79: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(ControlPolicy.organization_service_id).filter(ControlPolicy.policy_id.like('%restrictTLSVersion')).filter(ControlPolicy.status == ControlPolicy.Status.ALLOW_ALL))
     Arg:  session.query(ControlPolicy.organization_service_id).filter(ControlPolicy.policy_id.like('%restrictTLSVersion')).filter(ControlPolicy.status == ControlPolicy.Status.ALLOW_ALL)

  🚨 Line 89: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(ControlPolicy.organization_service_id).filter(ControlPolicy.policy_id.like('%restrictTLSVersion')).filter(ControlPolicy.status == ControlPolicy.Status.DENIED_VALUES).filter(func.json_contains(func.json_extract(ControlPolicy.content, '$.rules[*].values.deniedValues'), '"TLS_VERSION_1"', '$')))
     Arg:  session.query(ControlPolicy.organization_service_id).filter(ControlPolicy.policy_id.like('%restrictTLSVersion')).filter(ControlPolicy.status == ControlPolicy.Status.DENIED_VALUES).filter(func.json_contains(func.json_extract(ControlPolicy.content, '$.rules[*].values.deniedValues'), '"TLS_VERSION_1"', '$'))

  🚨 Line 106: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(ControlPolicy.organization_service_id).filter(ControlPolicy.policy_id.like('%restrictTLSVersion')).filter(ControlPolicy.status == ControlPolicy.Status.DENIED_VALUES).filter(func.json_contains(func.json_extract(ControlPolicy.content, '$.rules[*].values.deniedValues'), '"TLS_VERSION_1_1"', '$')))
     Arg:  session.query(ControlPolicy.organization_service_id).filter(ControlPolicy.policy_id.like('%restrictTLSVersion')).filter(ControlPolicy.status == ControlPolicy.Status.DENIED_VALUES).filter(func.json_contains(func.json_extract(ControlPolicy.content, '$.rules[*].values.deniedValues'), '"TLS_VERSION_1_1"', '$'))

  🚨 Line 122: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.notin_(session.query(ControlPolicy.organization_service_id).filter(ControlPolicy.policy_id.like('%restrictTLSVersion')))
     Arg:  session.query(ControlPolicy.organization_service_id).filter(ControlPolicy.policy_id.like('%restrictTLSVersion'))

  🚨 Line 166: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(ControlPolicy.organization_service_id).filter(ControlPolicy.policy_id.like('%serviceAccountKeyExpiryHours')).filter(func.json_extract(ControlPolicy.content, '$.rules[0].allowAll') == func.cast(True, types.JSON)))
     Arg:  session.query(ControlPolicy.organization_service_id).filter(ControlPolicy.policy_id.like('%serviceAccountKeyExpiryHours')).filter(func.json_extract(ControlPolicy.content, '$.rules[0].allowAll') == func.cast(True, types.JSON))

  🚨 Line 187: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(ControlPolicy.organization_service_id).filter(ControlPolicy.policy_id.like('%serviceAccountKeyExpiryHours')).filter(condition))
     Arg:  session.query(ControlPolicy.organization_service_id).filter(ControlPolicy.policy_id.like('%serviceAccountKeyExpiryHours')).filter(condition)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/content_delivery_network.py:
  ⚠️  Line 413: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 595: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('storagecontainer%')))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('storagecontainer%'))

  ⚠️  Line 1086: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🚨 Line 1129: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(subq))
     Arg:  session.query(ResourceLink.left_resource_id).filter(subq)

  🚨 Line 1212: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceTag.resource_id))
     Arg:  session.query(ResourceTag.resource_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/service_role.py:
  ⚠️  Line 695: query_variable (in_or_notin_)
     Code: db_cls.role_resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 702: query_variable (in_or_notin_)
     Code: db_cls.role_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 909: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq_policy)
     Arg:  subq_policy

  🚨 Line 1002: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id == 'GCE'))
     Arg:  session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id == 'GCE')

  ⚠️  Line 1416: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subquery)
     Arg:  subquery

  ⚠️  Line 1540: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/hypervisor.py:
  🚨 Line 27: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(dbo.ResourceLink.left_resource_id).filter(dbo.ResourceLink.left_resource_id.like('hypervisor:%')))
     Arg:  session.query(dbo.ResourceLink.left_resource_id).filter(dbo.ResourceLink.left_resource_id.like('hypervisor:%'))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/cognitive_service_account.py:
  ⚠️  Line 561: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 563: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 829: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 831: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 962: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 989: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 991: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/container.py:
  ⚠️  Line 375: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(resource_vuln_query)
     Arg:  resource_vuln_query

  🚨 Line 705: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(Container.pod_resource_id).filter(or_(Container.log_driver.notin_(settings_config['log_drivers']), Container.log_driver.is_(None))))
     Arg:  session.query(Container.pod_resource_id).filter(or_(Container.log_driver.notin_(settings_config['log_drivers']), Container.log_driver.is_(None)))

  🚨 Line 713: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(Container.pod_resource_id).filter(Container.log_driver.in_(settings_config['log_drivers'])))
     Arg:  session.query(Container.pod_resource_id).filter(Container.log_driver.in_(settings_config['log_drivers']))

  ⚠️  Line 794: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/volume.py:
  🚨 Line 343: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(db_cls.resource_id).outerjoin(subquery, func.lower(db_cls.resource_id) == func.lower(subquery.c.volume_resource_id)).filter(or_(subquery.c.max_create_time < threshold, and_(subquery.c.volume_resource_id.is_(None), db_cls.create_time < threshold))))
     Arg:  session.query(db_cls.resource_id).outerjoin(subquery, func.lower(db_cls.resource_id) == func.lower(subquery.c.volume_resource_id)).filter(or_(subquery.c.max_create_time < threshold, and_(subquery.c.volume_resource_id.is_(None), db_cls.create_time < threshold)))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/container_cluster.py:
  🚨 Line 169: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceTag.resource_id).filter(func.JSON_LENGTH(ResourceTag.tags) > 0))
     Arg:  session.query(ResourceTag.resource_id).filter(func.JSON_LENGTH(ResourceTag.tags) > 0)

  ⚠️  Line 570: query_variable (in_or_notin_)
     Code: db_cls.network_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 600: query_variable (in_or_notin_)
     Code: db_cls.network_resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 1215: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/recommendation.py:
  ⚠️  Line 67: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(subq)
     Arg:  subq

  ⚠️  Line 129: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 182: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/service_domain.py:
  🚨 Line 15: direct_query (in_or_notin_)
     Code: db_cls.organization_service_id.in_(session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id == cloud_type_id))
     Arg:  session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id == cloud_type_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/es_ingest_pipeline.py:
  ⚠️  Line 60: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 62: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 150: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RL.left_resource_id).filter(RL.right_resource_id.notin_(sc_resource_ids), RL.right_resource_id.like('storagecontainer:%')))
     Arg:  session.query(RL.left_resource_id).filter(RL.right_resource_id.notin_(sc_resource_ids), RL.right_resource_id.like('storagecontainer:%'))

  🚨 Line 180: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RL.left_resource_id).filter(RL.right_resource_id.in_(subq)))
     Arg:  session.query(RL.left_resource_id).filter(RL.right_resource_id.in_(subq))

  ⚠️  Line 180: query_variable (in_or_notin_)
     Code: RL.right_resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/global_load_balancer.py:
  ⚠️  Line 63: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/secure_file_transfer.py:
  ⚠️  Line 195: query_variable (in_or_notin_)
     Code: db_cls.logging_role_resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 195: query_variable (in_or_notin_)
     Code: db_cls.invocation_role_resource_id.notin_(subq2)
     Arg:  subq2

  ⚠️  Line 200: query_variable (in_or_notin_)
     Code: db_cls.logging_role_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 200: query_variable (in_or_notin_)
     Code: db_cls.invocation_role_resource_id.in_(subq2)
     Arg:  subq2

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/private_image.py:
  🚨 Line 152: direct_query (in_or_notin_)
     Code: db_cls.image_id.in_(session.query(AutoscalingLaunchConfiguration.image_id).join(ResourceLink, AutoscalingLaunchConfiguration.resource_id == ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('autoscalinggroup%')))
     Arg:  session.query(AutoscalingLaunchConfiguration.image_id).join(ResourceLink, AutoscalingLaunchConfiguration.resource_id == ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('autoscalinggroup%'))

  🚨 Line 159: direct_query (in_or_notin_)
     Code: db_cls.image_id.in_(session.query(AutoscalingLaunchConfiguration.image_id))
     Arg:  session.query(AutoscalingLaunchConfiguration.image_id)

  🚨 Line 193: direct_query (in_or_notin_)
     Code: db_cls.image_id.in_(session.query(LaunchTemplate.image_id).join(ResourceLink, LaunchTemplate.resource_id == ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('autoscalinggroup%')))
     Arg:  session.query(LaunchTemplate.image_id).join(ResourceLink, LaunchTemplate.resource_id == ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('autoscalinggroup%'))

  🚨 Line 200: direct_query (in_or_notin_)
     Code: db_cls.image_id.in_(session.query(LaunchTemplate.image_id))
     Arg:  session.query(LaunchTemplate.image_id)

  🚨 Line 242: direct_query (in_or_notin_)
     Code: db_cls.image_id.in_(session.query(AutoscalingLaunchConfiguration.image_id).filter(AutoscalingLaunchConfiguration.image_id.isnot(None)))
     Arg:  session.query(AutoscalingLaunchConfiguration.image_id).filter(AutoscalingLaunchConfiguration.image_id.isnot(None))

  🚨 Line 247: direct_query (in_or_notin_)
     Code: db_cls.image_id.in_(session.query(Instance.image_id).filter(Instance.image_id.isnot(None)))
     Arg:  session.query(Instance.image_id).filter(Instance.image_id.isnot(None))

  🚨 Line 248: direct_query (in_or_notin_)
     Code: db_cls.image_id.in_(session.query(LaunchTemplate.image_id).filter(LaunchTemplate.image_id.isnot(None)))
     Arg:  session.query(LaunchTemplate.image_id).filter(LaunchTemplate.image_id.isnot(None))

  🚨 Line 254: direct_query (in_or_notin_)
     Code: db_cls.image_id.notin_(session.query(AutoscalingLaunchConfiguration.image_id).filter(AutoscalingLaunchConfiguration.image_id.isnot(None)))
     Arg:  session.query(AutoscalingLaunchConfiguration.image_id).filter(AutoscalingLaunchConfiguration.image_id.isnot(None))

  🚨 Line 259: direct_query (in_or_notin_)
     Code: db_cls.image_id.notin_(session.query(Instance.image_id).filter(Instance.image_id.isnot(None)))
     Arg:  session.query(Instance.image_id).filter(Instance.image_id.isnot(None))

  🚨 Line 260: direct_query (in_or_notin_)
     Code: db_cls.image_id.notin_(session.query(LaunchTemplate.image_id).filter(LaunchTemplate.image_id.isnot(None)))
     Arg:  session.query(LaunchTemplate.image_id).filter(LaunchTemplate.image_id.isnot(None))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/resource_access_list.py:
  🚨 Line 107: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.right_resource_id.like('resourceaccesslist:%')))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.right_resource_id.like('resourceaccesslist:%'))

  🚨 Line 112: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id.like('resourceaccesslist:%')).filter(ResourceLink.right_resource_id.like('privatesubnet:%')))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id.like('resourceaccesslist:%')).filter(ResourceLink.right_resource_id.like('privatesubnet:%'))

  ⚠️  Line 241: query_variable (in_or_notin_)
     Code: NetworkInterface.instance_resource_id.in_(instance_subq)
     Arg:  instance_subq

  ⚠️  Line 263: query_variable (in_or_notin_)
     Code: ResourceCommonData.resource_id.in_(instance_subq_set)
     Arg:  instance_subq_set

  ⚠️  Line 269: query_variable (in_or_notin_)
     Code: ResourceCommonData.resource_id.in_(instance_subq_set)
     Arg:  instance_subq_set

  🚨 Line 272: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.public.is_(True)))
     Arg:  session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.public.is_(True))

  🚨 Line 283: direct_query (in_or_notin_)
     Code: NetworkInterface.subnet_resource_id.in_(session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.public.is_(True)))
     Arg:  session.query(NetworkSubnet.resource_id).filter(NetworkSubnet.public.is_(True))

  ⚠️  Line 295: query_variable (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(resource_link_subq)
     Arg:  resource_link_subq

  ⚠️  Line 298: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(access_list_in_links_subq)
     Arg:  access_list_in_links_subq

  ⚠️  Line 298: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(resource_link_subq)
     Arg:  resource_link_subq

  ⚠️  Line 442: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 786: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 788: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 906: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 960: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1137: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1180: direct_query (in_or_notin_)
     Code: db_cls.parent_resource_id.in_(session.query(ResourceAccessList.resource_id).filter(ResourceAccessList.default_acl.is_(True)))
     Arg:  session.query(ResourceAccessList.resource_id).filter(ResourceAccessList.default_acl.is_(True))

  🚨 Line 1203: direct_query (in_or_notin_)
     Code: db_cls.parent_resource_id.in_(session.query(ResourceAccessList.resource_id).filter(ResourceAccessList.default_acl.is_(False)))
     Arg:  session.query(ResourceAccessList.resource_id).filter(ResourceAccessList.default_acl.is_(False))

  ⚠️  Line 1266: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1367: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 1383: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1502: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1504: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1727: direct_query (in_or_notin_)
     Code: db_cls.parent_resource_id.in_(session.query(ResourceAccessList.resource_id).filter(ResourceAccessList.name.op('regexp')('%s' % expression)))
     Arg:  session.query(ResourceAccessList.resource_id).filter(ResourceAccessList.name.op('regexp')('%s' % expression))

  🚨 Line 1775: direct_query (in_or_notin_)
     Code: db_cls.parent_resource_id.in_(session.query(ResourceAccessList.resource_id).filter(not_(ResourceAccessList.name.op('regexp')('%s' % expression))))
     Arg:  session.query(ResourceAccessList.resource_id).filter(not_(ResourceAccessList.name.op('regexp')('%s' % expression)))

  ⚠️  Line 1889: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🟡 Line 2000: possible_row_variable (==)
     Code: db_cls == ResourceCommonData
     Arg:  ResourceCommonData

  🚨 Line 2123: direct_query (in_or_notin_)
     Code: NetworkInterface.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(list(right_resource_id_set))))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(list(right_resource_id_set)))

  ⚠️  Line 2166: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🟡 Line 2249: possible_row_variable (==)
     Code: db_cls == ResourceCommonData
     Arg:  ResourceCommonData

  ⚠️  Line 2256: query_variable (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 2304: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 2306: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 2360: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/restapi.py:
  ⚠️  Line 101: query_variable (in_or_notin_)
     Code: db_cls.parent_resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 103: query_variable (in_or_notin_)
     Code: db_cls.parent_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 182: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RestApiStage.parent_resource_id).filter(RestApiStage.certificate_id.is_(None)))
     Arg:  session.query(RestApiStage.parent_resource_id).filter(RestApiStage.certificate_id.is_(None))

  🚨 Line 211: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RestApiStage.parent_resource_id).filter(RestApiStage.access_logging.is_(False)))
     Arg:  session.query(RestApiStage.parent_resource_id).filter(RestApiStage.access_logging.is_(False))

  🚨 Line 240: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RestApiStage.parent_resource_id).filter(RestApiStage.metrics_enabled.is_(False)))
     Arg:  session.query(RestApiStage.parent_resource_id).filter(RestApiStage.metrics_enabled.is_(False))

  🚨 Line 272: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(RestApiStage.parent_resource_id).filter(RestApiStage.metrics_enabled.is_(False)))
     Arg:  session.query(RestApiStage.parent_resource_id).filter(RestApiStage.metrics_enabled.is_(False))

  🚨 Line 302: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RestApiStage.parent_resource_id).filter(RestApiStage.web_acl_id.is_(None)))
     Arg:  session.query(RestApiStage.parent_resource_id).filter(RestApiStage.web_acl_id.is_(None))

  🚨 Line 311: direct_query (in_or_notin_)
     Code: db_cls.parent_resource_id.in_(session.query(RestApi.resource_id).filter(RestApi.protocol == 'REST'))
     Arg:  session.query(RestApi.resource_id).filter(RestApi.protocol == 'REST')

  🚨 Line 336: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(RestApiStage.parent_resource_id).filter(RestApiStage.web_acl_id.is_(None)))
     Arg:  session.query(RestApiStage.parent_resource_id).filter(RestApiStage.web_acl_id.is_(None))

  🚨 Line 365: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RestApiStage.parent_resource_id).filter(RestApiStage.cache_cluster_enabled.is_(True), RestApiStage.cache_data_encrypted.is_(False)))
     Arg:  session.query(RestApiStage.parent_resource_id).filter(RestApiStage.cache_cluster_enabled.is_(True), RestApiStage.cache_data_encrypted.is_(False))

  🚨 Line 395: direct_query (in_or_notin_)
     Code: getattr(db_cls, column).notin_(session.query(RestApiAuthorizer.parent_resource_id))
     Arg:  session.query(RestApiAuthorizer.parent_resource_id)

  ⚠️  Line 434: query_variable (in_or_notin_)
     Code: getattr(db_cls, column).in_(subq)
     Arg:  subq

  ⚠️  Line 480: query_variable (in_or_notin_)
     Code: getattr(db_cls, column).notin_(subq)
     Arg:  subq

  ⚠️  Line 482: query_variable (in_or_notin_)
     Code: getattr(db_cls, column).in_(subq)
     Arg:  subq

  🚨 Line 544: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RestApiStage.parent_resource_id.distinct()).filter(RestApiStage.tracing_enabled.is_(True)))
     Arg:  session.query(RestApiStage.parent_resource_id.distinct()).filter(RestApiStage.tracing_enabled.is_(True))

  🚨 Line 573: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RestApiStage.parent_resource_id.distinct()).filter(RestApiStage.tracing_enabled.is_(False)))
     Arg:  session.query(RestApiStage.parent_resource_id.distinct()).filter(RestApiStage.tracing_enabled.is_(False))

  🚨 Line 640: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RestApiStage.parent_resource_id).filter(or_(RestApiStage.logging_level.is_(None), RestApiStage.logging_level.notin_(logging_levels))))
     Arg:  session.query(RestApiStage.parent_resource_id).filter(or_(RestApiStage.logging_level.is_(None), RestApiStage.logging_level.notin_(logging_levels)))

  ⚠️  Line 741: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🚨 Line 924: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RestApiStage.parent_resource_id).filter(bool_evaluate(RestApiStage.throttling_burst_limit, op, 0)))
     Arg:  session.query(RestApiStage.parent_resource_id).filter(bool_evaluate(RestApiStage.throttling_burst_limit, op, 0))

  🚨 Line 975: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RestApiStage.parent_resource_id).filter(RestApiStage.throttling_burst_limit > 0, bool_evaluate(RestApiStage.throttling_burst_limit, op, throttling_burst_limit)))
     Arg:  session.query(RestApiStage.parent_resource_id).filter(RestApiStage.throttling_burst_limit > 0, bool_evaluate(RestApiStage.throttling_burst_limit, op, throttling_burst_limit))

  🚨 Line 1030: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(RestApiStage.parent_resource_id).filter(RestApiStage.throttling_rate_limit > 0, bool_evaluate(RestApiStage.throttling_rate_limit, op, throttling_rate_limit)))
     Arg:  session.query(RestApiStage.parent_resource_id).filter(RestApiStage.throttling_rate_limit > 0, bool_evaluate(RestApiStage.throttling_rate_limit, op, throttling_rate_limit))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/ddos_protection.py:
  ⚠️  Line 32: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 60: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 98: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(DDoSProtection.ref_resource_id).filter(and_(DDoSProtection.ref_resource_type == db_cls.resource_type, DDoSProtection.last_attack_start_time.isnot(None), or_(DDoSProtection.last_attack_end_time.is_(None), DDoSProtection.last_attack_start_time >= since_date, DDoSProtection.last_attack_end_time >= since_date))))
     Arg:  session.query(DDoSProtection.ref_resource_id).filter(and_(DDoSProtection.ref_resource_type == db_cls.resource_type, DDoSProtection.last_attack_start_time.isnot(None), or_(DDoSProtection.last_attack_end_time.is_(None), DDoSProtection.last_attack_start_time >= since_date, DDoSProtection.last_attack_end_time >= since_date)))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/business_intelligence_subscription.py:
  ⚠️  Line 108: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq_set)
     Arg:  subq_set

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/launch_template.py:
  🚨 Line 38: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(LaunchTemplate.resource_id).filter(LaunchTemplate.resource_id == ResourceLink.right_resource_id).filter(ResourceLink.right_resource_id.like('launchtemplate%')).filter(ResourceLink.left_resource_id.like('autoscalinggroup%')))
     Arg:  session.query(LaunchTemplate.resource_id).filter(LaunchTemplate.resource_id == ResourceLink.right_resource_id).filter(ResourceLink.right_resource_id.like('launchtemplate%')).filter(ResourceLink.left_resource_id.like('autoscalinggroup%'))

  🚨 Line 66: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(LaunchTemplate.resource_id).filter(LaunchTemplate.resource_id == ResourceLink.right_resource_id).filter(ResourceLink.right_resource_id.like('launchtemplate%')).filter(ResourceLink.left_resource_id.like('autoscalinggroup%')))
     Arg:  session.query(LaunchTemplate.resource_id).filter(LaunchTemplate.resource_id == ResourceLink.right_resource_id).filter(ResourceLink.right_resource_id.like('launchtemplate%')).filter(ResourceLink.left_resource_id.like('autoscalinggroup%'))

  🚨 Line 99: direct_query (in_or_notin_)
     Code: db_cls.image_id.notin_(session.query(PrivateImage.image_id))
     Arg:  session.query(PrivateImage.image_id)

  🚨 Line 100: direct_query (in_or_notin_)
     Code: db_cls.image_id.notin_(session.query(SharedImage.image_id))
     Arg:  session.query(SharedImage.image_id)

  🚨 Line 137: direct_query (in_or_notin_)
     Code: db_cls.image_id.in_(session.query(PrivateImage.image_id).filter(PrivateImage.creation_date <= threshold))
     Arg:  session.query(PrivateImage.image_id).filter(PrivateImage.creation_date <= threshold)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/distributed_table_cluster.py:
  🚨 Line 30: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id == db_cls.resource_id).filter(ResourceLink.right_resource_id.like('resourceaccesslist%')).filter(ResourceLink.right_resource_id.in_(session.query(ResourceAccessListRule.parent_resource_id).filter(ResourceAccessListRule.parent_resource_id == ResourceLink.right_resource_id).filter((ResourceAccessListRule.direction == 'ingress') & (ResourceAccessListRule.rule_action == 'allow') & ResourceAccessListRule.source_network.in_(['0.0.0.0/0', '::/0'])))))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.left_resource_id == db_cls.resource_id).filter(ResourceLink.right_resource_id.like('resourceaccesslist%')).filter(ResourceLink.right_resource_id.in_(session.query(ResourceAccessListRule.parent_resource_id).filter(ResourceAccessListRule.parent_resource_id == ResourceLink.right_resource_id).filter((ResourceAccessListRule.direction == 'ingress') & (ResourceAccessListRule.rule_action == 'allow') & ResourceAccessListRule.source_network.in_(['0.0.0.0/0', '::/0']))))

  🚨 Line 35: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(ResourceAccessListRule.parent_resource_id).filter(ResourceAccessListRule.parent_resource_id == ResourceLink.right_resource_id).filter((ResourceAccessListRule.direction == 'ingress') & (ResourceAccessListRule.rule_action == 'allow') & ResourceAccessListRule.source_network.in_(['0.0.0.0/0', '::/0'])))
     Arg:  session.query(ResourceAccessListRule.parent_resource_id).filter(ResourceAccessListRule.parent_resource_id == ResourceLink.right_resource_id).filter((ResourceAccessListRule.direction == 'ingress') & (ResourceAccessListRule.rule_action == 'allow') & ResourceAccessListRule.source_network.in_(['0.0.0.0/0', '::/0']))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/auto_scaling_group.py:
  🚨 Line 48: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('privatesubnet:%')).group_by(ResourceLink.left_resource_id).having(func.count(ResourceLink.right_resource_id) >= zone_count))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('privatesubnet:%')).group_by(ResourceLink.left_resource_id).having(func.count(ResourceLink.right_resource_id) >= zone_count)

  🟡 Line 52: possible_row_variable (>=)
     Code: func.count(ResourceLink.right_resource_id) >= zone_count
     Arg:  zone_count

  🚨 Line 85: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('privatesubnet:%')).group_by(ResourceLink.left_resource_id).having(func.count(ResourceLink.right_resource_id) <= zone_count))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('privatesubnet:%')).group_by(ResourceLink.left_resource_id).having(func.count(ResourceLink.right_resource_id) <= zone_count)

  🟡 Line 89: possible_row_variable (<=)
     Code: func.count(ResourceLink.right_resource_id) <= zone_count
     Arg:  zone_count

  🚨 Line 355: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(session.query(Instance.resource_id).filter(Instance.state == Instance.State.RUNNING).filter(Instance.launch_time < threshold))))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(session.query(Instance.resource_id).filter(Instance.state == Instance.State.RUNNING).filter(Instance.launch_time < threshold)))

  🚨 Line 357: direct_query (in_or_notin_)
     Code: ResourceLink.right_resource_id.in_(session.query(Instance.resource_id).filter(Instance.state == Instance.State.RUNNING).filter(Instance.launch_time < threshold))
     Arg:  session.query(Instance.resource_id).filter(Instance.state == Instance.State.RUNNING).filter(Instance.launch_time < threshold)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/private_network.py:
  ⚠️  Line 196: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 625: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 627: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 723: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 724: query_variable (in_or_notin_)
     Code: db_cls.network_id.notin_(security_lake_subq)
     Arg:  security_lake_subq

  ⚠️  Line 728: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 728: query_variable (in_or_notin_)
     Code: db_cls.network_resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 732: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 733: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 734: query_variable (in_or_notin_)
     Code: db_cls.network_resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 776: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 777: query_variable (in_or_notin_)
     Code: db_cls.network_id.in_(security_lake_subq)
     Arg:  security_lake_subq

  ⚠️  Line 782: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 782: query_variable (in_or_notin_)
     Code: db_cls.network_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 785: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 785: query_variable (in_or_notin_)
     Code: db_cls.subnet_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 785: query_variable (in_or_notin_)
     Code: db_cls.network_resource_id.in_(subq)
     Arg:  subq

  🚨 Line 805: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.flow_logs_enabled, ResourceProperty.value == '1'))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.flow_logs_enabled, ResourceProperty.value == '1')

  🚨 Line 827: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.flow_logs_enabled).filter(ResourceProperty.value == '1'))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.flow_logs_enabled).filter(ResourceProperty.value == '1')

  🚨 Line 849: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.provider_access).filter(ResourceProperty.value == '1'))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.provider_access).filter(ResourceProperty.value == '1')

  🚨 Line 871: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.provider_access).filter(ResourceProperty.value == '1'))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.provider_access).filter(ResourceProperty.value == '1')

  🚨 Line 897: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(NetworkGateway.network_resource_id).filter(NetworkGateway.network_resource_id.isnot(None)))
     Arg:  session.query(NetworkGateway.network_resource_id).filter(NetworkGateway.network_resource_id.isnot(None))

  🚨 Line 920: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(NetworkGateway.network_resource_id))
     Arg:  session.query(NetworkGateway.network_resource_id)

  ⚠️  Line 1033: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1233: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(NetworkSubnet.network_resource_id).outerjoin(ResourceLink, and_(NetworkSubnet.resource_id == ResourceLink.left_resource_id, ResourceLink.right_resource_id.like('resourceaccesslist%'))).filter(ResourceLink.left_resource_id.is_(None)))
     Arg:  session.query(NetworkSubnet.network_resource_id).outerjoin(ResourceLink, and_(NetworkSubnet.resource_id == ResourceLink.left_resource_id, ResourceLink.right_resource_id.like('resourceaccesslist%'))).filter(ResourceLink.left_resource_id.is_(None))

  ⚠️  Line 1373: query_variable (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(zone_query)
     Arg:  zone_query

  ⚠️  Line 1383: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 1385: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1775: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 1840: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🚨 Line 2031: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('virtualprivategateway:%')))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('virtualprivategateway:%'))

  🚨 Line 2038: direct_query (in_or_notin_)
     Code: db_cls.network_id.in_(session.query(TransitGatewayAttachment.attachment_resource_id))
     Arg:  session.query(TransitGatewayAttachment.attachment_resource_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/serverless_function.py:
  🚨 Line 705: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ServerlessFunction.resource_id).filter(func.JSON_LENGTH(ServerlessFunction.environment_variables) > 0))
     Arg:  session.query(ServerlessFunction.resource_id).filter(func.JSON_LENGTH(ServerlessFunction.environment_variables) > 0)

  ⚠️  Line 944: query_variable (in_or_notin_)
     Code: db_cls.web_app_resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1217: query_variable (in_or_notin_)
     Code: db_cls.organization_service_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/log_analytics_workspace.py:
  ⚠️  Line 39: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/airflowenvironment.py:
  ⚠️  Line 93: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(source_network_subq)
     Arg:  source_network_subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/ml_workspace.py:
  ⚠️  Line 179: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 181: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/storage_container.py:
  ⚠️  Line 219: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 246: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(StorageContainerPermission.resource_id))
     Arg:  session.query(StorageContainerPermission.resource_id)

  ⚠️  Line 1577: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 1589: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 2125: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id))))
     Arg:  session.query(ThreatFindingResource.affected_resource_id).filter(ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id)))

  🚨 Line 2127: direct_query (in_or_notin_)
     Code: ThreatFindingResource.threat_finding_resource_id.in_(session.query(ThreatFinding.resource_id))
     Arg:  session.query(ThreatFinding.resource_id)

  🚨 Line 2189: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(StorageContainer.storage_account_resource_id).filter(or_(StorageContainer.soft_delete_retention.is_(None), bool_evaluate(a=StorageContainer.soft_delete_retention, op=operator, b=days))))
     Arg:  session.query(StorageContainer.storage_account_resource_id).filter(or_(StorageContainer.soft_delete_retention.is_(None), bool_evaluate(a=StorageContainer.soft_delete_retention, op=operator, b=days)))

  🚨 Line 2203: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(StorageContainer.storage_account_resource_id).filter(bool_evaluate(a=StorageContainer.soft_delete_retention, op=operator, b=days)))
     Arg:  session.query(StorageContainer.storage_account_resource_id).filter(bool_evaluate(a=StorageContainer.soft_delete_retention, op=operator, b=days))

  🚨 Line 2399: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(StorageContainer.storage_account_resource_id).filter(or_(StorageContainer.blob_soft_delete_retention.is_(None), bool_evaluate(a=StorageContainer.blob_soft_delete_retention, op=operator, b=days))))
     Arg:  session.query(StorageContainer.storage_account_resource_id).filter(or_(StorageContainer.blob_soft_delete_retention.is_(None), bool_evaluate(a=StorageContainer.blob_soft_delete_retention, op=operator, b=days)))

  🚨 Line 2414: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(StorageContainer.storage_account_resource_id).filter(bool_evaluate(a=StorageContainer.blob_soft_delete_retention, op=operator, b=days)))
     Arg:  session.query(StorageContainer.storage_account_resource_id).filter(bool_evaluate(a=StorageContainer.blob_soft_delete_retention, op=operator, b=days))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/relay_namespace.py:
  ⚠️  Line 95: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/vulnerability.py:
  🚨 Line 66: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(VMResource.resource_id).join(VMResourceReport, VMResource.report_id == VMResourceReport.id).join(VMReportVulnerability, VMResourceReport.id == VMReportVulnerability.report_id).join(VMVulnerability, VMReportVulnerability.vulnerability_id == VMVulnerability.id).join(VMVulnerabilitySummary, VMVulnerabilitySummary.vulnerability_id == VMVulnerability.id).join(ResourceCommonData, VMResource.resource_id == ResourceCommonData.resource_id).filter(VMVulnerability.severity.in_(severities)).filter(VMVulnerabilitySummary.first_seen > threshold).filter(ResourceCommonData.pending_delete.is_(False)))
     Arg:  session.query(VMResource.resource_id).join(VMResourceReport, VMResource.report_id == VMResourceReport.id).join(VMReportVulnerability, VMResourceReport.id == VMReportVulnerability.report_id).join(VMVulnerability, VMReportVulnerability.vulnerability_id == VMVulnerability.id).join(VMVulnerabilitySummary, VMVulnerabilitySummary.vulnerability_id == VMVulnerability.id).join(ResourceCommonData, VMResource.resource_id == ResourceCommonData.resource_id).filter(VMVulnerability.severity.in_(severities)).filter(VMVulnerabilitySummary.first_seen > threshold).filter(ResourceCommonData.pending_delete.is_(False))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/service_policy.py:
  🚨 Line 165: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ServicePolicyDocument.service_policy_resource_id).filter(or_(*or_stmts)))
     Arg:  session.query(ServicePolicyDocument.service_policy_resource_id).filter(or_(*or_stmts))

  🚨 Line 339: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(policy_resource_ids)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(policy_resource_ids))

  🚨 Line 393: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(policy_resource_ids)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(policy_resource_ids))

  🚨 Line 450: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(policy_resource_ids)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(policy_resource_ids))

  🚨 Line 760: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(invalid_policy_resource_ids)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(invalid_policy_resource_ids))

  🚨 Line 765: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(managed_policy_resource_ids)))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.in_(managed_policy_resource_ids))

  ⚠️  Line 846: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(direct_attachment_subq)
     Arg:  direct_attachment_subq

  ⚠️  Line 1059: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1285: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ServicePolicyDocument.service_policy_resource_id).filter(or_(and_(*conditions), *all_conditions)))
     Arg:  session.query(ServicePolicyDocument.service_policy_resource_id).filter(or_(and_(*conditions), *all_conditions))

  🚨 Line 1296: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ServicePolicyDocument.service_policy_resource_id).filter(or_(*conditions, *all_conditions)))
     Arg:  session.query(ServicePolicyDocument.service_policy_resource_id).filter(or_(*conditions, *all_conditions))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/bedrock.py:
  🟡 Line 111: possible_row_attribute (==)
     Code: SC.resource_id == db_cls.training_data_config_s3_resource_id
     Arg:  db_cls.training_data_config_s3_resource_id

  🟡 Line 112: possible_row_attribute (==)
     Code: SC.resource_id == db_cls.validation_data_config_s3_resource_id
     Arg:  db_cls.validation_data_config_s3_resource_id

  🟡 Line 113: possible_row_attribute (==)
     Code: SC.resource_id == db_cls.output_data_config_s3_resource_id
     Arg:  db_cls.output_data_config_s3_resource_id

  ⚠️  Line 147: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 149: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/big_data_serverless_namespace.py:
  ⚠️  Line 54: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 56: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/private_subnet.py:
  🚨 Line 141: direct_query (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(session.query(ResourceAccessList.resource_id).filter(or_(ResourceAccessList.access_list_id.in_(settings_config['association_list']), ResourceAccessList.name.in_(settings_config['association_list']))))
     Arg:  session.query(ResourceAccessList.resource_id).filter(or_(ResourceAccessList.access_list_id.in_(settings_config['association_list']), ResourceAccessList.name.in_(settings_config['association_list'])))

  ⚠️  Line 157: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 182: direct_query (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(session.query(ResourceAccessList.resource_id).filter(ResourceAccessList.default_acl.is_(True)))
     Arg:  session.query(ResourceAccessList.resource_id).filter(ResourceAccessList.default_acl.is_(True))

  🚨 Line 213: direct_query (in_or_notin_)
     Code: ResourceLink.left_resource_id.in_(session.query(ResourceAccessList.resource_id).filter(ResourceAccessList.default_acl.is_(False)))
     Arg:  session.query(ResourceAccessList.resource_id).filter(ResourceAccessList.default_acl.is_(False))

  🚨 Line 245: direct_query (in_or_notin_)
     Code: RouteTable.resource_id.in_(session.query(RouteTableRoute.route_table_resource_id).filter(RouteTableRoute.cidr == '0.0.0.0/0').filter(RouteTableRoute.state == 'active'))
     Arg:  session.query(RouteTableRoute.route_table_resource_id).filter(RouteTableRoute.cidr == '0.0.0.0/0').filter(RouteTableRoute.state == 'active')

  🚨 Line 266: direct_query (in_or_notin_)
     Code: db_cls.network_resource_id.in_(session.query(RouteTable.network_resource_id).filter(RouteTable.resource_id.in_(session.query(RouteTableRoute.route_table_resource_id).filter(RouteTableRoute.cidr == '0.0.0.0/0').filter(RouteTableRoute.state == 'active').filter(RouteTable.vpc_association_id.isnot(None)))))
     Arg:  session.query(RouteTable.network_resource_id).filter(RouteTable.resource_id.in_(session.query(RouteTableRoute.route_table_resource_id).filter(RouteTableRoute.cidr == '0.0.0.0/0').filter(RouteTableRoute.state == 'active').filter(RouteTable.vpc_association_id.isnot(None))))

  🚨 Line 268: direct_query (in_or_notin_)
     Code: RouteTable.resource_id.in_(session.query(RouteTableRoute.route_table_resource_id).filter(RouteTableRoute.cidr == '0.0.0.0/0').filter(RouteTableRoute.state == 'active').filter(RouteTable.vpc_association_id.isnot(None)))
     Arg:  session.query(RouteTableRoute.route_table_resource_id).filter(RouteTableRoute.cidr == '0.0.0.0/0').filter(RouteTableRoute.state == 'active').filter(RouteTable.vpc_association_id.isnot(None))

  🚨 Line 295: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('resourceaccesslist%')))
     Arg:  session.query(ResourceLink.left_resource_id).filter(ResourceLink.right_resource_id.like('resourceaccesslist%'))

  🟡 Line 455: possible_row_variable (==)
     Code: db_cls.log_config_metadata == metadata
     Arg:  metadata

  🟡 Line 457: possible_row_variable (==)
     Code: db_cls.log_config_metadata == metadata
     Arg:  metadata

  ⚠️  Line 566: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq1)
     Arg:  subq1

  ⚠️  Line 567: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq2)
     Arg:  subq2

  ⚠️  Line 568: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq3)
     Arg:  subq3

  ⚠️  Line 569: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq4)
     Arg:  subq4

  ⚠️  Line 570: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq5)
     Arg:  subq5

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/service_region.py:
  🚨 Line 64: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(AwsConfig.region_resource_id).filter(AwsConfig.auditing_is_enabled.is_(False)))
     Arg:  session.query(AwsConfig.region_resource_id).filter(AwsConfig.auditing_is_enabled.is_(False))

  🚨 Line 88: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(AwsConfig.region_resource_id).filter(AwsConfig.auditing_is_enabled.is_(True)))
     Arg:  session.query(AwsConfig.region_resource_id).filter(AwsConfig.auditing_is_enabled.is_(True))

  🚨 Line 115: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(AwsConfig.region_resource_id).filter(AwsConfig.channels.isnot(None)).filter(AwsConfig.unknown_account.is_(True)))
     Arg:  session.query(AwsConfig.region_resource_id).filter(AwsConfig.channels.isnot(None)).filter(AwsConfig.unknown_account.is_(True))

  🚨 Line 141: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(AwsConfig.region_resource_id).filter(AwsConfig.channels.isnot(None)).filter(AwsConfig.cross_account.is_(True)))
     Arg:  session.query(AwsConfig.region_resource_id).filter(AwsConfig.channels.isnot(None)).filter(AwsConfig.cross_account.is_(True))

  🚨 Line 169: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(AwsConfig.region_resource_id).filter(AwsConfig.channels.isnot(None)).filter(AwsConfig.cross_account.is_(False)))
     Arg:  session.query(AwsConfig.region_resource_id).filter(AwsConfig.channels.isnot(None)).filter(AwsConfig.cross_account.is_(False))

  ⚠️  Line 259: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 636: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 640: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 641: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).join(ServiceEncryptionKey, and_(ServiceEncryptionKey.arn == ResourceProperty.value, ServiceEncryptionKey.name.notin_(key_names))).filter(ResourceProperty.name == CorePropertyNames.disk_encryption_key))
     Arg:  session.query(ResourceProperty.resource_id).join(ServiceEncryptionKey, and_(ServiceEncryptionKey.arn == ResourceProperty.value, ServiceEncryptionKey.name.notin_(key_names))).filter(ResourceProperty.name == CorePropertyNames.disk_encryption_key)

  🚨 Line 659: direct_query (in_or_notin_)
     Code: Volume.organization_service_id.in_(session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id.in_([CloudType.AMAZON_WEB_SERVICES, CloudType.AMAZON_WEB_SERVICES_GOV, CloudType.AMAZON_WEB_SERVICES_CHINA])))
     Arg:  session.query(OrganizationService.organization_service_id).filter(OrganizationService.cloud_type_id.in_([CloudType.AMAZON_WEB_SERVICES, CloudType.AMAZON_WEB_SERVICES_GOV, CloudType.AMAZON_WEB_SERVICES_CHINA]))

  🚨 Line 708: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.disk_encryption).filter(ResourceProperty.value == '1'))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.disk_encryption).filter(ResourceProperty.value == '1')

  🚨 Line 736: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.disk_encryption_key).filter(ResourceProperty.value.in_(session.query(ServiceEncryptionKey.arn).filter(ServiceEncryptionKey.customer_managed.is_(False)))))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.disk_encryption_key).filter(ResourceProperty.value.in_(session.query(ServiceEncryptionKey.arn).filter(ServiceEncryptionKey.customer_managed.is_(False))))

  🚨 Line 740: direct_query (in_or_notin_)
     Code: ResourceProperty.value.in_(session.query(ServiceEncryptionKey.arn).filter(ServiceEncryptionKey.customer_managed.is_(False)))
     Arg:  session.query(ServiceEncryptionKey.arn).filter(ServiceEncryptionKey.customer_managed.is_(False))

  🚨 Line 745: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.disk_encryption).filter(ResourceProperty.value == '1'))
     Arg:  session.query(ResourceProperty.resource_id).filter(ResourceProperty.name == CorePropertyNames.disk_encryption).filter(ResourceProperty.value == '1')

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/tag.py:
  🟡 Line 254: possible_row_variable (==)
     Code: db_cls == BigDataServerlessWorkgroup
     Arg:  BigDataServerlessWorkgroup

  🟡 Line 260: possible_row_variable (==)
     Code: db_cls == DatabaseInstance
     Arg:  DatabaseInstance

  🟡 Line 268: possible_row_variable (==)
     Code: db_cls == SpannerDatabase
     Arg:  SpannerDatabase

  ⚠️  Line 331: query_variable (in_or_notin_)
     Code: getattr(db_cls, parent_col).notin_(subq)
     Arg:  subq

  ⚠️  Line 332: query_variable (in_or_notin_)
     Code: getattr(db_cls, parent_col).in_(subq)
     Arg:  subq

  🚨 Line 611: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceTagPair.resource_id).join(TagPair, ResourceTagPair.pair_id == TagPair.id).filter(key_col == key_value, val_col.in_(values)))
     Arg:  session.query(ResourceTagPair.resource_id).join(TagPair, ResourceTagPair.pair_id == TagPair.id).filter(key_col == key_value, val_col.in_(values))

  ⚠️  Line 632: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 714: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 715: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 805: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 807: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 821: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 823: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 875: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 876: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 922: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 985: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1069: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 1143: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1211: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1211: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(tags_subq)
     Arg:  tags_subq

  ⚠️  Line 1276: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  ⚠️  Line 1276: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(tags_subq)
     Arg:  tags_subq

  🚨 Line 1303: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceTag.resource_id).filter(func.JSON_LENGTH(ResourceTag.tags) > 0))
     Arg:  session.query(ResourceTag.resource_id).filter(func.JSON_LENGTH(ResourceTag.tags) > 0)

  🚨 Line 1331: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceTag.resource_id).filter(func.JSON_LENGTH(ResourceTag.tags) > 0))
     Arg:  session.query(ResourceTag.resource_id).filter(func.JSON_LENGTH(ResourceTag.tags) > 0)

  🚨 Line 1353: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceTag.resource_id).filter(func.JSON_LENGTH(ResourceTag.tags) == 1).filter(func.JSON_CONTAINS_PATH(ResourceTag.tags, 'one', '$.Name')))
     Arg:  session.query(ResourceTag.resource_id).filter(func.JSON_LENGTH(ResourceTag.tags) == 1).filter(func.JSON_CONTAINS_PATH(ResourceTag.tags, 'one', '$.Name'))

  🟡 Line 1412: possible_row_variable (==)
     Code: db_cls == BigDataServerlessWorkgroup
     Arg:  BigDataServerlessWorkgroup

  🟡 Line 1418: possible_row_variable (==)
     Code: db_cls == DatabaseInstance
     Arg:  DatabaseInstance

  🟡 Line 1426: possible_row_variable (==)
     Code: db_cls == SpannerDatabase
     Arg:  SpannerDatabase

  ⚠️  Line 1439: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  🟡 Line 1493: possible_row_variable (==)
     Code: db_cls == BigDataServerlessWorkgroup
     Arg:  BigDataServerlessWorkgroup

  🟡 Line 1499: possible_row_variable (==)
     Code: db_cls == DatabaseInstance
     Arg:  DatabaseInstance

  🟡 Line 1507: possible_row_variable (==)
     Code: db_cls == SpannerDatabase
     Arg:  SpannerDatabase

  ⚠️  Line 1551: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1580: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceTag.resource_id))
     Arg:  session.query(ResourceTag.resource_id)

  🚨 Line 1609: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceTag.resource_id))
     Arg:  session.query(ResourceTag.resource_id)

  🚨 Line 1647: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceTag.resource_id).filter(func.JSON_LENGTH(ResourceTag.tags) >= settings_config['count']))
     Arg:  session.query(ResourceTag.resource_id).filter(func.JSON_LENGTH(ResourceTag.tags) >= settings_config['count'])

  ⚠️  Line 1700: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 1703: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/snapshot.py:
  🚨 Line 86: direct_query (in_or_notin_)
     Code: db_cls.volume_resource_id.in_(session.query(db_cls.volume_resource_id).filter(db_cls.create_time > threshold))
     Arg:  session.query(db_cls.volume_resource_id).filter(db_cls.create_time > threshold)

  🚨 Line 92: direct_query (in_or_notin_)
     Code: db_cls.instance_resource_id.in_(session.query(db_cls.instance_resource_id).filter(db_cls.create_time > threshold))
     Arg:  session.query(db_cls.instance_resource_id).filter(db_cls.create_time > threshold)

  🚨 Line 162: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(SnapshotPermission.parent_resource_id).filter(SnapshotPermission.public.is_(True)))
     Arg:  session.query(SnapshotPermission.parent_resource_id).filter(SnapshotPermission.public.is_(True))

  🚨 Line 207: direct_query (in_or_notin_)
     Code: db_cls.snapshot_id.in_(session.query(SnapshotPermission.snapshot_id))
     Arg:  session.query(SnapshotPermission.snapshot_id)

  🚨 Line 235: direct_query (in_or_notin_)
     Code: OrganizationService.resource_id.in_(session.query(Badge.target_resource_id).filter(clauses))
     Arg:  session.query(Badge.target_resource_id).filter(clauses)

  🚨 Line 325: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('privateimage%')))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('privateimage%'))

  🚨 Line 350: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('privateimage%')))
     Arg:  session.query(ResourceLink.right_resource_id).filter(ResourceLink.left_resource_id.like('privateimage%'))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/logic_app.py:
  ⚠️  Line 114: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/databricksworkspace.py:
  ⚠️  Line 103: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/transit_gateway.py:
  🚨 Line 89: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(session.query(TransitGatewayAttachment.transit_gateway_resource_id).filter(TransitGatewayAttachment.attachment_resource_owner_id.notin_(accounts)))
     Arg:  session.query(TransitGatewayAttachment.transit_gateway_resource_id).filter(TransitGatewayAttachment.attachment_resource_owner_id.notin_(accounts))

  🚨 Line 129: direct_query (in_or_notin_)
     Code: getattr(db_cls, column).notin_(session.query(TransitGatewayAttachment.attachment_resource_id))
     Arg:  session.query(TransitGatewayAttachment.attachment_resource_id)

  🚨 Line 134: direct_query (in_or_notin_)
     Code: getattr(db_cls, column).in_(session.query(TransitGatewayAttachment.attachment_resource_id))
     Arg:  session.query(TransitGatewayAttachment.attachment_resource_id)

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyDb/QueryFilters/distributed_table.py:
  ⚠️  Line 618: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(sub_query)
     Arg:  sub_query

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/layered_context/public_accessibility.py:
  🟡 Line 107: possible_row_attribute (==)
     Code: rt == RT.DATABASE_INSTANCE
     Arg:  RT.DATABASE_INSTANCE

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/layered_context/__init__.py:
  🟡 Line 524: possible_row_attribute (==)
     Code: order_by_expr == RiskScoreComputation.sensitive_data_status
     Arg:  RiskScoreComputation.sensitive_data_status

  🟡 Line 691: possible_row_attribute (==)
     Code: order_by_arg == ApplicationRiskScoreComputation.sensitive_data_status
     Arg:  ApplicationRiskScoreComputation.sensitive_data_status

  🟡 Line 799: possible_row_attribute (==)
     Code: order_by_expr == CloudRiskScoreComputation.sensitive_data_status
     Arg:  CloudRiskScoreComputation.sensitive_data_status

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBotfactory/instance_actions.py:
  🚨 Line 224: direct_query (in_or_notin_)
     Code: ResourceAccessListRule.parent_resource_id.in_(db.session.query(ResourceLink.right_resource_id).filter(or_(ResourceLink.left_resource_id.in_(instance_resource_ids), ResourceLink.left_resource_id.in_(network_interface_resource_ids))))
     Arg:  db.session.query(ResourceLink.right_resource_id).filter(or_(ResourceLink.left_resource_id.in_(instance_resource_ids), ResourceLink.left_resource_id.in_(network_interface_resource_ids)))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBotfactory/curation.py:
  🟡 Line 350: possible_row_variable (==)
     Code: CollectionLink.collection_id == data_collection_id
     Arg:  data_collection_id

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBotfactory/broker.py:
  🚨 Line 143: direct_query (in_or_notin_)
     Code: DbObjects.ResourceGroup.resource_group_id.in_(db.session.query(DbObjects.ResourceGroupResource.resource_group_id).filter(DbObjects.ResourceGroupResource.resource_id.in_(chunk)))
     Arg:  db.session.query(DbObjects.ResourceGroupResource.resource_group_id).filter(DbObjects.ResourceGroupResource.resource_id.in_(chunk))

  🚨 Line 171: direct_query (in_or_notin_)
     Code: DbObjects.DivvyBot.bot_id.in_(db.session.query(DbObjects.DivvyBotScope.bot_id).filter(DbObjects.DivvyBotScope.scope_resource_id.in_(list(scope_resource_ids))))
     Arg:  db.session.query(DbObjects.DivvyBotScope.bot_id).filter(DbObjects.DivvyBotScope.scope_resource_id.in_(list(scope_resource_ids)))

📄 /Users/ykim/code/divvy-dev/Divvy/src/python/DivvyBotfactory/filters.py:
  ⚠️  Line 174: query_variable (in_or_notin_)
     Code: db_cls.resource_id.notin_(subq)
     Arg:  subq

  ⚠️  Line 176: query_variable (in_or_notin_)
     Code: db_cls.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 182: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_ids)))
     Arg:  db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_ids))

  🚨 Line 197: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_([])))
     Arg:  db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_([]))

  🚨 Line 214: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_ids)))
     Arg:  db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_ids))

  ⚠️  Line 748: query_variable (in_or_notin_)
     Code: DbObjects.ResourceCommonData.resource_id.in_(subq)
     Arg:  subq

  🚨 Line 1237: direct_query (in_or_notin_)
     Code: DbObjects.ResourceCommonData.resource_id.in_(db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_ids)))
     Arg:  db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_ids))

  🚨 Line 1694: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_blacklist)))
     Arg:  db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_blacklist))

  🚨 Line 1701: direct_query (in_or_notin_)
     Code: db_cls.resource_id.in_(db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_blacklist)))
     Arg:  db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_blacklist))

  🚨 Line 1749: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_blacklist)))
     Arg:  db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_blacklist))

  🚨 Line 1790: direct_query (in_or_notin_)
     Code: db_cls.resource_id.notin_(db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_blacklist)))
     Arg:  db.session.query(DbObjects.ResourceGroupResource.resource_id).filter(DbObjects.ResourceGroupResource.resource_group_id.in_(resource_group_blacklist))

  ⚠️  Line 1813: query_variable (in_or_notin_)
     Code: DbObjects.ResourceGroupResource.resource_id.in_(resource_id_query)
     Arg:  resource_id_query

📋 Summary:
🚨 direct_query: Query in in_() - needs .scalar_subquery()
🔴 row_result: Row object in comparison - needs .scalar() or [0]
🟡 possible_row_*: Variables that might be Row objects
⚠️  *_variable/*_attribute: Likely needs investigation
ℹ️  subquery_call: Already has .subquery() - check for warnings
